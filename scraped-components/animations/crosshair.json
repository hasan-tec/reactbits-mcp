{
  "name": "Crosshair",
  "description": "An open source collection of high quality, animated, interactive & fully customizable React components for building stunning, memorable user interfaces.",
  "props": {},
  "dependencies": [],
  "url": "https://www.reactbits.dev/animations/crosshair",
  "code": "1npm i gsap\n\n1import { useRef } from 'react';\n2import Crosshair from './Crosshair';\n3\n4const Component = () => {\n5const containerRef = useRef(null);\n6\n7return (\n8  <div ref={containerRef} style={{ height: '300px', overflow: 'hidden' }}>\n9    <Crosshair containerRef={containerRef} color='#ffffff'/> // containerRef defaults to \"window\" if not provided\n10  </div>\n11)\n12};\n\n1import { useEffect, useRef } from 'react';\n2import { gsap } from 'gsap';\n3\n4const lerp = (a, b, n) => (1 - n) * a + n * b;\n5\n6const getMousePos = (e, container) => {\n7  if (container) {\n8    const bounds = container.getBoundingClientRect();\n9    return {\n10      x: e.clientX - bounds.left,\n11      y: e.clientY - bounds.top,\n12    };\n13  }\n14  return { x: e.clientX, y: e.clientY };\n15};\n16\n17const Crosshair = ({ color = 'white', containerRef = null }) => {\n18  const cursorRef = useRef(null);\n19  const lineHorizontalRef = useRef(null);\n20  const lineVerticalRef = useRef(null);\n21  const filterXRef = useRef(null);\n22  const filterYRef = useRef(null);\n23\n24  let mouse = { x: 0, y: 0 };\n25\n26  useEffect(() => {\n27    const handleMouseMove = (ev) => {\n28      // eslint-disable-next-line react-hooks/exhaustive-deps\n29      mouse = getMousePos(ev, containerRef?.current);\n30\n31      if (containerRef?.current) {\n32        const bounds = containerRef.current.getBoundingClientRect();\n33        if (\n34          ev.clientX < bounds.left ||\n35          ev.clientX > bounds.right ||\n36          ev.clientY < bounds.top ||\n37          ev.clientY > bounds.bottom\n38        ) {\n39          gsap.to([lineHorizontalRef.current, lineVerticalRef.current], { opacity: 0 });\n40        } else {\n41          gsap.to([lineHorizontalRef.current, lineVerticalRef.current], { opacity: 1 });\n42        }\n43      }\n44    };\n45\n46    const target = containerRef?.current || window;\n47    target.addEventListener('mousemove', handleMouseMove);\n48\n49    const renderedStyles = {\n50      tx: { previous: 0, current: 0, amt: 0.15 },\n51      ty: { previous: 0, current: 0, amt: 0.15 },\n52    };\n53\n54    gsap.set([lineHorizontalRef.current, lineVerticalRef.current], { opacity: 0 });\n55\n56    const onMouseMove = () => {\n57      renderedStyles.tx.previous = renderedStyles.tx.current = mouse.x;\n58      renderedStyles.ty.previous = renderedStyles.ty.current = mouse.y;\n59\n60      gsap.to([lineHorizontalRef.current, lineVerticalRef.current], {\n61        duration: 0.9,\n62        ease: 'Power3.easeOut',\n63        opacity: 1,\n64      });\n65\n66      requestAnimationFrame(render);\n67\n68      target.removeEventListener('mousemove', onMouseMove);\n69    };\n70\n71    target.addEventListener('mousemove', onMouseMove);\n72\n73    const primitiveValues = { turbulence: 0 };\n74\n75    const tl = gsap.timeline({\n76      paused: true,\n77      onStart: () => {\n78        lineHorizontalRef.current.style.filter = `url(#filter-noise-x)`;\n79        lineVerticalRef.current.style.filter = `url(#filter-noise-y)`;\n80      },\n81      onUpdate: () => {\n82        if (filterXRef.current && filterYRef.current) {\n83          filterXRef.current.setAttribute('baseFrequency', primitiveValues.turbulence);\n84          filterYRef.current.setAttribute('baseFrequency', primitiveValues.turbulence);\n85        }\n86      },\n87      onComplete: () => {\n88        if (lineHorizontalRef.current && lineVerticalRef.current) {\n89          lineHorizontalRef.current.style.filter = lineVerticalRef.current.style.filter = 'none';\n90        }\n91      }\n92    }).to(primitiveValues, {\n93      duration: 0.5,\n94      ease: 'power1',\n95      startAt: { turbulence: 1 },\n96      turbulence: 0,\n97    });\n98\n99    const enter = () => tl.restart();\n100    const leave = () => tl.progress(1).kill();\n101\n102    const render = () => {\n103      renderedStyles.tx.current = mouse.x;\n104      renderedStyles.ty.current = mouse.y;\n105\n106      for (const key in renderedStyles) {\n107        renderedStyles[key].previous = lerp(renderedStyles[key].previous, renderedStyles[key].current, renderedStyles[key].amt);\n108      }\n109\n110      if (lineHorizontalRef.current && lineHorizontalRef.current) {\n111        gsap.set(lineVerticalRef.current, { x: renderedStyles.tx.previous });\n112        gsap.set(lineHorizontalRef.current, { y: renderedStyles.ty.previous });\n113      }\n114\n115      requestAnimationFrame(render);\n116    };\n117\n118    const links = containerRef?.current\n119      ? containerRef.current.querySelectorAll('a')\n120      : document.querySelectorAll('a');\n121\n122    links.forEach((link) => {\n123      link.addEventListener('mouseenter', enter);\n124      link.addEventListener('mouseleave', leave);\n125    });\n126\n127    return () => {\n128      target.removeEventListener('mousemove', handleMouseMove);\n129      target.removeEventListener('mousemove', onMouseMove);\n130      links.forEach((link) => {\n131        link.removeEventListener('mouseenter', enter);\n132        link.removeEventListener('mouseleave', leave);\n133      });\n134    };\n135  }, [containerRef]);\n136\n137  return (\n138    <div\n139      ref={cursorRef}\n140      className=\"cursor\"\n141      style={{\n142        position: containerRef ? 'absolute' : 'fixed',\n143        top: 0,\n144        left: 0,\n145        width: '100%',\n146        height: '100%',\n147        pointerEvents: 'none',\n148        zIndex: 10000,\n149      }}\n150    >\n151      <svg style={{ position: 'absolute', left: 0, top: 0, width: '100%', height: '100%' }}>\n152        <defs>\n153          <filter id=\"filter-noise-x\">\n154            <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.000001\" numOctaves=\"1\" ref={filterXRef} />\n155            <feDisplacementMap in=\"SourceGraphic\" scale=\"40\" />\n156          </filter>\n157          <filter id=\"filter-noise-y\">\n158            <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.000001\" numOctaves=\"1\" ref={filterYRef} />\n159            <feDisplacementMap in=\"SourceGraphic\" scale=\"40\" />\n160          </filter>\n161        </defs>\n162      </svg>\n163      <div\n164        ref={lineHorizontalRef}\n165        style={{\n166          position: 'absolute',\n167          width: '100%',\n168          height: '1px',\n169          background: color,\n170          pointerEvents: 'none',\n171          transform: 'translateY(50%)',\n172          opacity: 0,\n173        }}\n174      ></div>\n175      <div\n176        ref={lineVerticalRef}\n177        style={{\n178          position: 'absolute',\n179          height: '100%',\n180          width: '1px',\n181          background: color,\n182          pointerEvents: 'none',\n183          transform: 'translateX(50%)',\n184          opacity: 0,\n185        }}\n186      ></div>\n187    </div>\n188  );\n189};\n190\n191export default Crosshair;\n192\n\n1import { useEffect, useRef } from \"react\";\n2import { gsap } from \"gsap\";\n3\n4const lerp = (a, b, n) => (1 - n) * a + n * b;\n5\n6const getMousePos = (e, container) => {\n7  if (container) {\n8    const bounds = container.getBoundingClientRect();\n9    return {\n10      x: e.clientX - bounds.left,\n11      y: e.clientY - bounds.top,\n12    };\n13  }\n14  return { x: e.clientX, y: e.clientY };\n15};\n16\n17const Crosshair = ({ color = \"white\", containerRef = null }) => {\n18  const cursorRef = useRef(null);\n19  const lineHorizontalRef = useRef(null);\n20  const lineVerticalRef = useRef(null);\n21  const filterXRef = useRef(null);\n22  const filterYRef = useRef(null);\n23\n24  let mouse = { x: 0, y: 0 };\n25\n26  useEffect(() => {\n27    const handleMouseMove = (ev) => {\n28      // eslint-disable-next-line react-hooks/exhaustive-deps\n29      mouse = getMousePos(ev, containerRef?.current);\n30\n31      if (containerRef?.current) {\n32        const bounds = containerRef.current.getBoundingClientRect();\n33        if (\n34          ev.clientX < bounds.left ||\n35          ev.clientX > bounds.right ||\n36          ev.clientY < bounds.top ||\n37          ev.clientY > bounds.bottom\n38        ) {\n39          gsap.to([lineHorizontalRef.current, lineVerticalRef.current], {\n40            opacity: 0,\n41          });\n42        } else {\n43          gsap.to([lineHorizontalRef.current, lineVerticalRef.current], {\n44            opacity: 1,\n45          });\n46        }\n47      }\n48    };\n49\n50    const target = containerRef?.current || window;\n51    target.addEventListener(\"mousemove\", handleMouseMove);\n52\n53    const renderedStyles = {\n54      tx: { previous: 0, current: 0, amt: 0.15 },\n55      ty: { previous: 0, current: 0, amt: 0.15 },\n56    };\n57\n58    gsap.set([lineHorizontalRef.current, lineVerticalRef.current], {\n59      opacity: 0,\n60    });\n61\n62    const onMouseMove = () => {\n63      renderedStyles.tx.previous = renderedStyles.tx.current = mouse.x;\n64      renderedStyles.ty.previous = renderedStyles.ty.current = mouse.y;\n65\n66      gsap.to([lineHorizontalRef.current, lineVerticalRef.current], {\n67        duration: 0.9,\n68        ease: \"Power3.easeOut\",\n69        opacity: 1,\n70      });\n71\n72      requestAnimationFrame(render);\n73\n74      target.removeEventListener(\"mousemove\", onMouseMove);\n75    };\n76\n77    target.addEventListener(\"mousemove\", onMouseMove);\n78\n79    const primitiveValues = { turbulence: 0 };\n80\n81    const tl = gsap\n82      .timeline({\n83        paused: true,\n84        onStart: () => {\n85          lineHorizontalRef.current.style.filter = `url(#filter-noise-x)`;\n86          lineVerticalRef.current.style.filter = `url(#filter-noise-y)`;\n87        },\n88        onUpdate: () => {\n89          filterXRef.current.setAttribute(\n90            \"baseFrequency\",\n91            primitiveValues.turbulence\n92          );\n93          filterYRef.current.setAttribute(\n94            \"baseFrequency\",\n95            primitiveValues.turbulence\n96          );\n97        },\n98        onComplete: () => {\n99          lineHorizontalRef.current.style.filter = lineVerticalRef.current.style.filter = \"none\";\n100        },\n101      })\n102      .to(primitiveValues, {\n103        duration: 0.5,\n104        ease: \"power1\",\n105        startAt: { turbulence: 1 },\n106        turbulence: 0,\n107      });\n108\n109    const enter = () => tl.restart();\n110    const leave = () => tl.progress(1).kill();\n111\n112    const render = () => {\n113      renderedStyles.tx.current = mouse.x;\n114      renderedStyles.ty.current = mouse.y;\n115\n116      for (const key in renderedStyles) {\n117        renderedStyles[key].previous = lerp(\n118          renderedStyles[key].previous,\n119          renderedStyles[key].current,\n120          renderedStyles[key].amt\n121        );\n122      }\n123\n124      gsap.set(lineVerticalRef.current, { x: renderedStyles.tx.previous });\n125      gsap.set(lineHorizontalRef.current, { y: renderedStyles.ty.previous });\n126\n127      requestAnimationFrame(render);\n128    };\n129\n130    const links = containerRef?.current\n131      ? containerRef.current.querySelectorAll(\"a\")\n132      : document.querySelectorAll(\"a\");\n133\n134    links.forEach((link) => {\n135      link.addEventListener(\"mouseenter\", enter);\n136      link.addEventListener(\"mouseleave\", leave);\n137    });\n138\n139    return () => {\n140      target.removeEventListener(\"mousemove\", handleMouseMove);\n141      target.removeEventListener(\"mousemove\", onMouseMove);\n142      links.forEach((link) => {\n143        link.removeEventListener(\"mouseenter\", enter);\n144        link.removeEventListener(\"mouseleave\", leave);\n145      });\n146    };\n147  }, [containerRef]);\n148\n149  return (\n150    <div\n151      ref={cursorRef}\n152      className={`${\n153        containerRef ? \"absolute\" : \"fixed\"\n154      } top-0 left-0 w-full h-full pointer-events-none z-[10000]`}\n155    >\n156      <svg className=\"absolute top-0 left-0 w-full h-full\">\n157        <defs>\n158          <filter id=\"filter-noise-x\">\n159            <feTurbulence\n160              type=\"fractalNoise\"\n161              baseFrequency=\"0.000001\"\n162              numOctaves=\"1\"\n163              ref={filterXRef}\n164            />\n165            <feDisplacementMap in=\"SourceGraphic\" scale=\"40\" />\n166          </filter>\n167          <filter id=\"filter-noise-y\">\n168            <feTurbulence\n169              type=\"fractalNoise\"\n170              baseFrequency=\"0.000001\"\n171              numOctaves=\"1\"\n172              ref={filterYRef}\n173            />\n174            <feDisplacementMap in=\"SourceGraphic\" scale=\"40\" />\n175          </filter>\n176        </defs>\n177      </svg>\n178      <div\n179        ref={lineHorizontalRef}\n180        className={`absolute w-full h-px pointer-events-none opacity-0 transform translate-y-1/2`}\n181        style={{ background: color }}\n182      ></div>\n183      <div\n184        ref={lineVerticalRef}\n185        className={`absolute h-full w-px pointer-events-none opacity-0 transform translate-x-1/2`}\n186        style={{ background: color }}\n187      ></div>\n188    </div>\n189  );\n190};\n191\n192export default Crosshair;\n193",
  "category": "animations",
  "scrapedAt": "2025-04-27T11:48:39.251Z",
  "previewImage": "crosshair-preview.png"
}