{
  "name": "Magnet",
  "description": "An open source collection of high quality, animated, interactive & fully customizable React components for building stunning, memorable user interfaces.",
  "props": {},
  "dependencies": [],
  "previewImage": "",
  "url": "https://www.reactbits.dev/animations/magnet",
  "code": "1import Magnet from './Magnet'\n2\n3<Magnet padding={50} disabled={false} magnetStrength={50}>\n4  <p>Star React Bits on GitHub!</p>\n5</Magnet>\n\n1import { useState, useEffect, useRef } from \"react\";\n2\n3const Magnet = ({\n4  children,\n5  padding = 100,\n6  disabled = false,\n7  magnetStrength = 2,\n8  activeTransition = \"transform 0.3s ease-out\",\n9  inactiveTransition = \"transform 0.5s ease-in-out\",\n10  wrapperClassName = \"\",\n11  innerClassName = \"\",\n12  ...props\n13}) => {\n14  const [isActive, setIsActive] = useState(false);\n15  const [position, setPosition] = useState({ x: 0, y: 0 });\n16  const magnetRef = useRef(null);\n17\n18  useEffect(() => {\n19    if (disabled) {\n20      setPosition({ x: 0, y: 0 });\n21      return;\n22    }\n23\n24    const handleMouseMove = (e) => {\n25      if (!magnetRef.current) return;\n26\n27      const { left, top, width, height } = magnetRef.current.getBoundingClientRect();\n28      const centerX = left + width / 2;\n29      const centerY = top + height / 2;\n30\n31      const distX = Math.abs(centerX - e.clientX);\n32      const distY = Math.abs(centerY - e.clientY);\n33\n34      if (distX < width / 2 + padding && distY < height / 2 + padding) {\n35        setIsActive(true);\n36\n37        const offsetX = (e.clientX - centerX) / magnetStrength;\n38        const offsetY = (e.clientY - centerY) / magnetStrength;\n39        setPosition({ x: offsetX, y: offsetY });\n40      } else {\n41        setIsActive(false);\n42        setPosition({ x: 0, y: 0 });\n43      }\n44    };\n45\n46    window.addEventListener(\"mousemove\", handleMouseMove);\n47    return () => {\n48      window.removeEventListener(\"mousemove\", handleMouseMove);\n49    };\n50  }, [padding, disabled, magnetStrength]);\n51\n52  const transitionStyle = isActive ? activeTransition : inactiveTransition;\n53\n54  return (\n55    <div\n56      ref={magnetRef}\n57      className={wrapperClassName}\n58      style={{ position: \"relative\", display: \"inline-block\" }}\n59      {...props}\n60    >\n61      <div\n62        className={innerClassName}\n63        style={{\n64          transform: `translate3d(${position.x}px, ${position.y}px, 0)`,\n65          transition: transitionStyle,\n66          willChange: \"transform\",\n67        }}\n68      >\n69        {children}\n70      </div>\n71    </div>\n72  );\n73};\n74\n75export default Magnet;\n76"
}