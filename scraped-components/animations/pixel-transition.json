{
  "name": "Pixel Transition",
  "description": "An open source collection of high quality, animated, interactive & fully customizable React components for building stunning, memorable user interfaces.",
  "props": {},
  "dependencies": [],
  "url": "https://www.reactbits.dev/animations/pixel-transition",
  "code": "1npm i gsap\n\n1import PixelTransition from './PixelTransition';\n2\n3<PixelTransition\n4  firstContent={\n5    <img\n6      src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Cat03.jpg/1200px-Cat03.jpg\"\n7      alt=\"default pixel transition content, a cat!\"\n8      style={{ width: \"100%\", height: \"100%\", objectFit: \"cover\" }}\n9    />\n10  }\n11  secondContent={\n12    <div\n13      style={{\n14        width: \"100%\",\n15        height: \"100%\",\n16        display: \"grid\",\n17        placeItems: \"center\",\n18        backgroundColor: \"#111\"\n19      }}\n20    >\n21      <p style={{ fontWeight: 900, fontSize: \"3rem\", color: \"#ffffff\" }}>Meow!</p>\n22    </div>\n23  }\n24  gridSize={12}\n25  pixelColor='#ffffff'\n26  animationStepDuration={0.4}\n27  className=\"custom-pixel-card\"\n28/>\n\n1import { useRef, useEffect, useState } from 'react';\n2import { gsap } from 'gsap';\n3import './PixelTransition.css';\n4\n5function PixelTransition({\n6  firstContent,\n7  secondContent,\n8  gridSize = 7,\n9  pixelColor = 'currentColor',\n10  animationStepDuration = 0.3,\n11  className = '',\n12  style = {},\n13  aspectRatio = '100%',\n14}) {\n15  const containerRef = useRef(null);\n16  const pixelGridRef = useRef(null);\n17  const activeRef = useRef(null);\n18  const delayedCallRef = useRef(null);\n19\n20  const [isActive, setIsActive] = useState(false);\n21\n22  const isTouchDevice =\n23    'ontouchstart' in window ||\n24    navigator.maxTouchPoints > 0 ||\n25    window.matchMedia('(pointer: coarse)').matches;\n26\n27  useEffect(() => {\n28    const pixelGridEl = pixelGridRef.current;\n29    if (!pixelGridEl) return;\n30\n31    pixelGridEl.innerHTML = '';\n32\n33    for (let row = 0; row < gridSize; row++) {\n34      for (let col = 0; col < gridSize; col++) {\n35        const pixel = document.createElement('div');\n36        pixel.classList.add('pixelated-image-card__pixel');\n37        pixel.style.backgroundColor = pixelColor;\n38\n39        const size = 100 / gridSize;\n40        pixel.style.width = `${size}%`;\n41        pixel.style.height = `${size}%`;\n42        pixel.style.left = `${col * size}%`;\n43        pixel.style.top = `${row * size}%`;\n44        pixelGridEl.appendChild(pixel);\n45      }\n46    }\n47  }, [gridSize, pixelColor]);\n48\n49  const animatePixels = (activate) => {\n50    setIsActive(activate);\n51\n52    const pixelGridEl = pixelGridRef.current;\n53    const activeEl = activeRef.current;\n54    if (!pixelGridEl || !activeEl) return;\n55\n56    const pixels = pixelGridEl.querySelectorAll('.pixelated-image-card__pixel');\n57    if (!pixels.length) return;\n58\n59    gsap.killTweensOf(pixels);\n60    if (delayedCallRef.current) {\n61      delayedCallRef.current.kill();\n62    }\n63\n64    gsap.set(pixels, { display: 'none' });\n65\n66    const totalPixels = pixels.length;\n67    const staggerDuration = animationStepDuration / totalPixels;\n68\n69    gsap.to(pixels, {\n70      display: 'block',\n71      duration: 0,\n72      stagger: {\n73        each: staggerDuration,\n74        from: 'random'\n75      }\n76    });\n77\n78    delayedCallRef.current = gsap.delayedCall(animationStepDuration, () => {\n79      activeEl.style.display = activate ? 'block' : 'none';\n80      activeEl.style.pointerEvents = activate ? 'none' : '';\n81    });\n82\n83    gsap.to(pixels, {\n84      display: 'none',\n85      duration: 0,\n86      delay: animationStepDuration,\n87      stagger: {\n88        each: staggerDuration,\n89        from: 'random'\n90      }\n91    });\n92  };\n93\n94  const handleMouseEnter = () => {\n95    if (!isActive) animatePixels(true);\n96  };\n97  const handleMouseLeave = () => {\n98    if (isActive) animatePixels(false);\n99  };\n100  const handleClick = () => {\n101    animatePixels(!isActive);\n102  };\n103\n104  return (\n105    <div\n106      ref={containerRef}\n107      className={`pixelated-image-card ${className}`}\n108      style={style}\n109      onMouseEnter={!isTouchDevice ? handleMouseEnter : undefined}\n110      onMouseLeave={!isTouchDevice ? handleMouseLeave : undefined}\n111      onClick={isTouchDevice ? handleClick : undefined}\n112    >\n113      <div style={{ paddingTop: aspectRatio }} />\n114      <div className=\"pixelated-image-card__default\">\n115        {firstContent}\n116      </div>\n117      <div className=\"pixelated-image-card__active\" ref={activeRef}>\n118        {secondContent}\n119      </div>\n120      <div className=\"pixelated-image-card__pixels\" ref={pixelGridRef} />\n121    </div>\n122  );\n123}\n124\n125export default PixelTransition;\n126\n\n1.pixelated-image-card {\n2  background-color: #222;\n3  color: var(--color-primary, #fff);\n4  border-radius: 15px;\n5  border: 2px solid #fff;\n6  width: 300px;\n7  max-width: 100%;\n8  position: relative;\n9  overflow: hidden;\n10}\n11\n12.pixelated-image-card__default,\n13.pixelated-image-card__active,\n14.pixelated-image-card__pixels {\n15  width: 100%;\n16  height: 100%;\n17  position: absolute;\n18  top: 0;\n19  left: 0;\n20}\n21\n22.pixelated-image-card__active {\n23  z-index: 2;\n24}\n25\n26.pixelated-image-card__active {\n27  display: none;\n28}\n29\n30.pixelated-image-card__pixels {\n31  pointer-events: none;\n32  position: absolute;\n33  z-index: 3;\n34  top: 0;\n35  left: 0;\n36  width: 100%;\n37  height: 100%;\n38}\n39\n40.pixelated-image-card__pixel {\n41  display: none;\n42  position: absolute;\n43}\n44\n\n1import { useRef, useEffect, useState } from 'react';\n2import { gsap } from 'gsap';\n3\n4function PixelTransition({\n5  firstContent,\n6  secondContent,\n7  gridSize = 7,\n8  pixelColor = 'currentColor',\n9  animationStepDuration = 0.3,\n10  className = '',\n11  style = {},\n12  aspectRatio = '100%',\n13}) {\n14  const containerRef = useRef(null);\n15  const pixelGridRef = useRef(null);\n16  const activeRef = useRef(null);\n17  const delayedCallRef = useRef(null);\n18\n19  const [isActive, setIsActive] = useState(false);\n20\n21  const isTouchDevice =\n22    'ontouchstart' in window ||\n23    navigator.maxTouchPoints > 0 ||\n24    window.matchMedia('(pointer: coarse)').matches;\n25\n26  useEffect(() => {\n27    const pixelGridEl = pixelGridRef.current;\n28    if (!pixelGridEl) return;\n29\n30    pixelGridEl.innerHTML = '';\n31\n32    for (let row = 0; row < gridSize; row++) {\n33      for (let col = 0; col < gridSize; col++) {\n34        const pixel = document.createElement('div');\n35        pixel.classList.add('pixelated-image-card__pixel');\n36        pixel.classList.add('absolute', 'hidden');\n37        pixel.style.backgroundColor = pixelColor;\n38\n39        const size = 100 / gridSize;\n40        pixel.style.width = `${size}%`;\n41        pixel.style.height = `${size}%`;\n42        pixel.style.left = `${col * size}%`;\n43        pixel.style.top = `${row * size}%`;\n44\n45        pixelGridEl.appendChild(pixel);\n46      }\n47    }\n48  }, [gridSize, pixelColor]);\n49\n50  const animatePixels = (activate) => {\n51    setIsActive(activate);\n52\n53    const pixelGridEl = pixelGridRef.current;\n54    const activeEl = activeRef.current;\n55    if (!pixelGridEl || !activeEl) return;\n56\n57    const pixels = pixelGridEl.querySelectorAll('.pixelated-image-card__pixel');\n58    if (!pixels.length) return;\n59\n60    gsap.killTweensOf(pixels);\n61    if (delayedCallRef.current) {\n62      delayedCallRef.current.kill();\n63    }\n64\n65    gsap.set(pixels, { display: 'none' });\n66\n67    const totalPixels = pixels.length;\n68    const staggerDuration = animationStepDuration / totalPixels;\n69\n70    gsap.to(pixels, {\n71      display: 'block',\n72      duration: 0,\n73      stagger: {\n74        each: staggerDuration,\n75        from: 'random'\n76      }\n77    });\n78\n79    delayedCallRef.current = gsap.delayedCall(animationStepDuration, () => {\n80      activeEl.style.display = activate ? 'block' : 'none';\n81      activeEl.style.pointerEvents = activate ? 'none' : '';\n82    });\n83\n84    gsap.to(pixels, {\n85      display: 'none',\n86      duration: 0,\n87      delay: animationStepDuration,\n88      stagger: {\n89        each: staggerDuration,\n90        from: 'random'\n91      }\n92    });\n93  };\n94\n95  const handleMouseEnter = () => {\n96    if (!isActive) animatePixels(true);\n97  };\n98  const handleMouseLeave = () => {\n99    if (isActive) animatePixels(false);\n100  };\n101  const handleClick = () => {\n102    animatePixels(!isActive);\n103  };\n104\n105  return (\n106    <div\n107      ref={containerRef}\n108      // Combine your own className with the Tailwind classes for styling\n109      className={`\n110        ${className}\n111        bg-[#222]\n112        text-white\n113        rounded-[15px]\n114        border-2\n115        border-white\n116        w-[300px]\n117        max-w-full\n118        relative\n119        overflow-hidden\n120      `}\n121      style={style}\n122      onMouseEnter={!isTouchDevice ? handleMouseEnter : undefined}\n123      onMouseLeave={!isTouchDevice ? handleMouseLeave : undefined}\n124      onClick={isTouchDevice ? handleClick : undefined}\n125    >\n126      <div style={{ paddingTop: aspectRatio }} />\n127\n128      <div className=\"absolute inset-0 w-full h-full\">\n129        {firstContent}\n130      </div>\n131\n132      <div\n133        ref={activeRef}\n134        className=\"absolute inset-0 w-full h-full z-[2]\"\n135        style={{ display: 'none' }}\n136      >\n137        {secondContent}\n138      </div>\n139\n140      <div\n141        ref={pixelGridRef}\n142        className=\"absolute inset-0 w-full h-full pointer-events-none z-[3]\"\n143      />\n144    </div>\n145  );\n146}\n147\n148export default PixelTransition;\n149",
  "category": "animations",
  "scrapedAt": "2025-04-27T11:48:51.777Z",
  "previewImage": "pixel-transition-preview.png"
}