{
  "name": "Noise",
  "description": "An open source collection of high quality, animated, interactive & fully customizable React components for building stunning, memorable user interfaces.",
  "props": {},
  "dependencies": [],
  "url": "https://www.reactbits.dev/animations/noise",
  "code": "1import Noise from './Noise;'\n2\n3<div style={{width: '600px', height: '400px', position: 'relative', overflow: 'hidden'}}>\n4  <Noise\n5    patternSize={250}\n6    patternScaleX={1}\n7    patternScaleY={1}\n8    patternRefreshInterval={2}\n9    patternAlpha={15}\n10  />\n11</div>\n\n1import { useRef, useEffect } from 'react';\n2import './Noise.css';\n3\n4const Noise = ({\n5  patternSize = 250,\n6  patternScaleX = 1,\n7  patternScaleY = 1,\n8  patternRefreshInterval = 2,\n9  patternAlpha = 15,\n10}) => {\n11  const grainRef = useRef(null);\n12\n13  useEffect(() => {\n14    const canvas = grainRef.current;\n15    const ctx = canvas.getContext('2d');\n16    let frame = 0;\n17\n18    const patternCanvas = document.createElement('canvas');\n19    patternCanvas.width = patternSize;\n20    patternCanvas.height = patternSize;\n21    const patternCtx = patternCanvas.getContext('2d');\n22    const patternData = patternCtx.createImageData(patternSize, patternSize);\n23    const patternPixelDataLength = patternSize * patternSize * 4;\n24\n25    const resize = () => {\n26      canvas.width = window.innerWidth * window.devicePixelRatio;\n27      canvas.height = window.innerHeight * window.devicePixelRatio;\n28\n29      ctx.scale(patternScaleX, patternScaleY);\n30    };\n31\n32    const updatePattern = () => {\n33      for (let i = 0; i < patternPixelDataLength; i += 4) {\n34        const value = Math.random() * 255;\n35        patternData.data[i] = value;\n36        patternData.data[i + 1] = value;\n37        patternData.data[i + 2] = value;\n38        patternData.data[i + 3] = patternAlpha;\n39      }\n40      patternCtx.putImageData(patternData, 0, 0);\n41    };\n42\n43    const drawGrain = () => {\n44      ctx.clearRect(0, 0, canvas.width, canvas.height);\n45      ctx.fillStyle = ctx.createPattern(patternCanvas, 'repeat');\n46      ctx.fillRect(0, 0, canvas.width, canvas.height);\n47    };\n48\n49    const loop = () => {\n50      if (frame % patternRefreshInterval === 0) {\n51        updatePattern();\n52        drawGrain();\n53      }\n54      frame++;\n55      window.requestAnimationFrame(loop);\n56    };\n57\n58    window.addEventListener('resize', resize);\n59    resize();\n60    loop();\n61\n62    return () => {\n63      window.removeEventListener('resize', resize);\n64    };\n65  }, [patternSize, patternScaleX, patternScaleY, patternRefreshInterval, patternAlpha]);\n66\n67  return <canvas className=\"noise-overlay\" ref={grainRef} />;\n68};\n69\n70export default Noise;\n71\n\n1.noise-overlay {\n2  position: absolute;\n3  left: 0;\n4  top: 0;\n5  width: 100vw;\n6  height: 100vh;\n7}\n8\n\n1import { useRef, useEffect } from 'react';\n2\n3const Noise = ({\n4  patternSize = 250,\n5  patternScaleX = 1,\n6  patternScaleY = 1,\n7  patternRefreshInterval = 2,\n8  patternAlpha = 15,\n9}) => {\n10  const grainRef = useRef(null);\n11\n12  useEffect(() => {\n13    const canvas = grainRef.current;\n14    const ctx = canvas.getContext('2d');\n15    let frame = 0;\n16\n17    const patternCanvas = document.createElement('canvas');\n18    patternCanvas.width = patternSize;\n19    patternCanvas.height = patternSize;\n20    const patternCtx = patternCanvas.getContext('2d');\n21    const patternData = patternCtx.createImageData(patternSize, patternSize);\n22    const patternPixelDataLength = patternSize * patternSize * 4;\n23\n24    const resize = () => {\n25      canvas.width = window.innerWidth * window.devicePixelRatio;\n26      canvas.height = window.innerHeight * window.devicePixelRatio;\n27\n28      ctx.scale(patternScaleX, patternScaleY);\n29    };\n30\n31    const updatePattern = () => {\n32      for (let i = 0; i < patternPixelDataLength; i += 4) {\n33        const value = Math.random() * 255;\n34        patternData.data[i] = value;\n35        patternData.data[i + 1] = value;\n36        patternData.data[i + 2] = value;\n37        patternData.data[i + 3] = patternAlpha;\n38      }\n39      patternCtx.putImageData(patternData, 0, 0);\n40    };\n41\n42    const drawGrain = () => {\n43      ctx.clearRect(0, 0, canvas.width, canvas.height);\n44      ctx.fillStyle = ctx.createPattern(patternCanvas, 'repeat');\n45      ctx.fillRect(0, 0, canvas.width, canvas.height);\n46    };\n47\n48    const loop = () => {\n49      if (frame % patternRefreshInterval === 0) {\n50        updatePattern();\n51        drawGrain();\n52      }\n53      frame++;\n54      window.requestAnimationFrame(loop);\n55    };\n56\n57    window.addEventListener('resize', resize);\n58    resize();\n59    loop();\n60\n61    return () => {\n62      window.removeEventListener('resize', resize);\n63    };\n64  }, [patternSize, patternScaleX, patternScaleY, patternRefreshInterval, patternAlpha]);\n65\n66  return <canvas className=\"absolute inset-0 w-full h-full\" ref={grainRef} />;\n67};\n68\n69export default Noise;\n70",
  "category": "animations",
  "scrapedAt": "2025-04-27T11:48:33.022Z",
  "previewImage": "noise-preview.png"
}