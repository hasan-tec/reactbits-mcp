{
  "name": "Grid Motion",
  "description": "An open source collection of high quality, animated, interactive & fully customizable React components for building stunning, memorable user interfaces.",
  "props": {},
  "dependencies": [],
  "url": "https://www.reactbits.dev/backgrounds/grid-motion",
  "code": "1npm i gsap\n\n1import GridMotion from './GridMotion';\n2  \n3// note: you'll need to make sure the parent container of this component is sized properly\n4const items = [\n5  'Item 1',\n6  <div key='jsx-item-1'>Custom JSX Content</div>,\n7  'https://images.unsplash.com/photo-1723403804231-f4e9b515fe9d?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n8  'Item 2',\n9  <div key='jsx-item-2'>Custom JSX Content</div>,\n10  'Item 4',\n11  <div key='jsx-item-2'>Custom JSX Content</div>,\n12  'https://images.unsplash.com/photo-1723403804231-f4e9b515fe9d?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n13  'Item 5',\n14  <div key='jsx-item-2'>Custom JSX Content</div>,\n15  'Item 7',\n16  <div key='jsx-item-2'>Custom JSX Content</div>,\n17  'https://images.unsplash.com/photo-1723403804231-f4e9b515fe9d?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n18  'Item 8',\n19  <div key='jsx-item-2'>Custom JSX Content</div>,\n20  'Item 10',\n21  <div key='jsx-item-3'>Custom JSX Content</div>,\n22  'https://images.unsplash.com/photo-1723403804231-f4e9b515fe9d?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n23  'Item 11',\n24  <div key='jsx-item-2'>Custom JSX Content</div>,\n25  'Item 13',\n26  <div key='jsx-item-4'>Custom JSX Content</div>,\n27  'https://images.unsplash.com/photo-1723403804231-f4e9b515fe9d?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n28  'Item 14',\n29  // Add more items as needed\n30];\n31\n32<GridMotion items={items} />\n\n1import { useEffect, useRef } from 'react';\n2import { gsap } from 'gsap';\n3import './GridMotion.css';\n4\n5const GridMotion = ({ items = [], gradientColor = 'black' }) => {\n6  const gridRef = useRef(null);\n7  const rowRefs = useRef([]); // Array of refs for each row\n8  const mouseXRef = useRef(window.innerWidth / 2);\n9\n10  // Ensure the grid has 28 items (4 rows x 7 columns) by default\n11  const totalItems = 28;\n12  const defaultItems = Array.from({ length: totalItems }, (_, index) => `Item ${index + 1}`);\n13  const combinedItems = items.length > 0 ? items.slice(0, totalItems) : defaultItems;\n14\n15  useEffect(() => {\n16    gsap.ticker.lagSmoothing(0);\n17\n18    const handleMouseMove = (e) => {\n19      mouseXRef.current = e.clientX;\n20    };\n21\n22    const updateMotion = () => {\n23      const maxMoveAmount = 300;\n24      const baseDuration = 0.8; // Base duration for inertia\n25      const inertiaFactors = [0.6, 0.4, 0.3, 0.2]; // Different inertia for each row, outer rows slower\n26\n27      rowRefs.current.forEach((row, index) => {\n28        if (row) {\n29          const direction = index % 2 === 0 ? 1 : -1;\n30          const moveAmount = ((mouseXRef.current / window.innerWidth) * maxMoveAmount - maxMoveAmount / 2) * direction;\n31\n32          // Apply inertia and staggered stop\n33          gsap.to(row, {\n34            x: moveAmount,\n35            duration: baseDuration + inertiaFactors[index % inertiaFactors.length],\n36            ease: 'power3.out',\n37            overwrite: 'auto',\n38          });\n39        }\n40      });\n41    };\n42\n43    const removeAnimationLoop = gsap.ticker.add(updateMotion);\n44\n45    window.addEventListener('mousemove', handleMouseMove);\n46\n47    return () => {\n48      window.removeEventListener('mousemove', handleMouseMove);\n49      removeAnimationLoop(); // Properly remove the ticker listener\n50    };\n51  }, []);\n52\n53  return (\n54    <div className=\"noscroll loading\" ref={gridRef}>\n55      <section\n56        className=\"intro\"\n57        style={{\n58          background: `radial-gradient(circle, ${gradientColor} 0%, transparent 100%)`,\n59        }}\n60      >\n61        <div className=\"gridMotion-container\">\n62          {[...Array(4)].map((_, rowIndex) => (\n63            <div\n64              key={rowIndex}\n65              className=\"row\"\n66              ref={(el) => (rowRefs.current[rowIndex] = el)} // Set each row's ref\n67            >\n68              {[...Array(7)].map((_, itemIndex) => {\n69                const content = combinedItems[rowIndex * 7 + itemIndex];\n70                return (\n71                  <div key={itemIndex} className=\"row__item\">\n72                    <div className=\"row__item-inner\" style={{ backgroundColor: '#111' }}>\n73                      {typeof content === 'string' && content.startsWith('http') ? (\n74                        <div\n75                          className=\"row__item-img\"\n76                          style={{\n77                            backgroundImage: `url(${content})`,\n78                          }}\n79                        ></div>\n80                      ) : (\n81                        <div className=\"row__item-content\">{content}</div>\n82                      )}\n83                    </div>\n84                  </div>\n85                );\n86              })}\n87            </div>\n88          ))}\n89        </div>\n90        <div className=\"fullview\"></div>\n91      </section>\n92    </div>\n93  );\n94};\n95\n96export default GridMotion;\n97\n\n1.noscroll {\n2  height: 100%;\n3  width: 100%;\n4  overflow: hidden;\n5}\n6\n7.intro {\n8  width: 100%;\n9  height: 100vh;\n10  overflow: hidden;\n11  position: relative;\n12  display: flex;\n13  align-items: center;\n14  justify-content: center;\n15}\n16\n17.intro::after {\n18  content: \"\";\n19  position: absolute;\n20  top: 0;\n21  left: 0;\n22  width: 100%;\n23  height: 100%;\n24  background: url('../../../assets/noise.png');\n25  background-size: 250px;\n26  pointer-events: none;\n27  z-index: 4;\n28}\n29\n30.gridMotion-container {\n31  gap: 1rem;\n32  flex: none;\n33  position: relative;\n34  width: 150vw;\n35  height: 150vh;\n36  display: grid;\n37  grid-template-rows: repeat(4, 1fr);\n38  grid-template-columns: 100%;\n39  transform: rotate(-15deg);\n40  transform-origin: center center;\n41  z-index: 2;\n42}\n43\n44.row {\n45  display: grid;\n46  gap: 1rem;\n47  grid-template-columns: repeat(7, 1fr);\n48  will-change: transform, filter;\n49}\n50\n51.row__item {\n52  position: relative;\n53}\n54\n55.row__item-inner {\n56  position: relative;\n57  width: 100%;\n58  height: 100%;\n59  overflow: hidden;\n60  border-radius: 10px;\n61  background-color: #111;\n62  display: flex;\n63  align-items: center;\n64  justify-content: center;\n65  color: white;\n66  font-size: 1.5rem;\n67}\n68\n69.row__item-img {\n70  width: 100%;\n71  height: 100%;\n72  background-size: cover;\n73  background-position: 50% 50%;\n74  position: absolute;\n75  top: 0;\n76  left: 0;\n77}\n78\n79.row__item-content {\n80  padding: 1rem;\n81  text-align: center;\n82  z-index: 1;\n83}\n84\n85.fullview {\n86  position: relative;\n87  width: 100%;\n88  height: 100%;\n89  top: 0;\n90  left: 0;\n91  pointer-events: none;\n92}\n93\n94.fullview .row__item-inner {\n95  border-radius: 0px;\n96}\n97\n\n1import { useEffect, useRef } from 'react';\n2import { gsap } from 'gsap';\n3\n4const GridMotion = ({ items = [], gradientColor = 'black' }) => {\n5  const gridRef = useRef(null);\n6  const rowRefs = useRef([]); // Array of refs for each row\n7  const mouseXRef = useRef(window.innerWidth / 2);\n8\n9  // Ensure the grid has 28 items (4 rows x 7 columns) by default\n10  const totalItems = 28;\n11  const defaultItems = Array.from({ length: totalItems }, (_, index) => `Item ${index + 1}`);\n12  const combinedItems = items.length > 0 ? items.slice(0, totalItems) : defaultItems;\n13\n14  useEffect(() => {\n15    gsap.ticker.lagSmoothing(0);\n16\n17    const handleMouseMove = (e) => {\n18      mouseXRef.current = e.clientX;\n19    };\n20\n21    const updateMotion = () => {\n22      const maxMoveAmount = 300;\n23      const baseDuration = 0.8; // Base duration for inertia\n24      const inertiaFactors = [0.6, 0.4, 0.3, 0.2]; // Different inertia for each row, outer rows slower\n25\n26      rowRefs.current.forEach((row, index) => {\n27        if (row) {\n28          const direction = index % 2 === 0 ? 1 : -1;\n29          const moveAmount = ((mouseXRef.current / window.innerWidth) * maxMoveAmount - maxMoveAmount / 2) * direction;\n30\n31          // Apply inertia and staggered stop\n32          gsap.to(row, {\n33            x: moveAmount,\n34            duration: baseDuration + inertiaFactors[index % inertiaFactors.length],\n35            ease: 'power3.out',\n36            overwrite: 'auto',\n37          });\n38        }\n39      });\n40    };\n41\n42    const removeAnimationLoop = gsap.ticker.add(updateMotion);\n43    window.addEventListener('mousemove', handleMouseMove);\n44\n45    return () => {\n46      window.removeEventListener('mousemove', handleMouseMove);\n47      removeAnimationLoop();\n48    };\n49  }, []);\n50\n51  return (\n52    <div ref={gridRef} className=\"h-full w-full overflow-hidden\">\n53      <section\n54        className=\"w-full h-screen overflow-hidden relative flex items-center justify-center\"\n55        style={{\n56          background: `radial-gradient(circle, ${gradientColor} 0%, transparent 100%)`,\n57        }}\n58      >\n59        {/* Noise overlay */}\n60        <div\n61          className=\"absolute inset-0 pointer-events-none z-[4] bg-[url('../../../assets/noise.png')] bg-[length:250px]\"\n62        ></div>\n63        <div\n64          className=\"gap-4 flex-none relative w-[150vw] h-[150vh] grid grid-rows-4 grid-cols-1 rotate-[-15deg] origin-center z-[2]\"\n65        >\n66          {[...Array(4)].map((_, rowIndex) => (\n67            <div\n68              key={rowIndex}\n69              className=\"grid gap-4 grid-cols-7\"\n70              style={{ willChange: 'transform, filter' }}\n71              ref={(el) => (rowRefs.current[rowIndex] = el)}\n72            >\n73              {[...Array(7)].map((_, itemIndex) => {\n74                const content = combinedItems[rowIndex * 7 + itemIndex];\n75                return (\n76                  <div key={itemIndex} className=\"relative\">\n77                    <div\n78                      className=\"relative w-full h-full overflow-hidden rounded-[10px] bg-[#111] flex items-center justify-center text-white text-[1.5rem]\"\n79                    >\n80                      {typeof content === 'string' && content.startsWith('http') ? (\n81                        <div\n82                          className=\"w-full h-full bg-cover bg-center absolute top-0 left-0\"\n83                          style={{ backgroundImage: `url(${content})` }}\n84                        ></div>\n85                      ) : (\n86                        <div className=\"p-4 text-center z-[1]\">{content}</div>\n87                      )}\n88                    </div>\n89                  </div>\n90                );\n91              })}\n92            </div>\n93          ))}\n94        </div>\n95        <div className=\"relative w-full h-full top-0 left-0 pointer-events-none\"></div>\n96      </section>\n97    </div>\n98  );\n99};\n100\n101export default GridMotion;\n102",
  "category": "backgrounds",
  "scrapedAt": "2025-04-27T11:48:27.405Z",
  "previewImage": "grid-motion-preview.png"
}