{
  "name": "Aurora",
  "description": "An open source collection of high quality, animated, interactive & fully customizable React components for building stunning, memorable user interfaces.",
  "props": {},
  "dependencies": [],
  "url": "https://www.reactbits.dev/backgrounds/aurora",
  "code": "1npm i ogl\n\n1import Aurora from './Aurora';\n2  \n3<Aurora\n4  colorStops={[\"#3A29FF\", \"#FF94B4\", \"#FF3232\"]}\n5  blend={0.5}\n6  amplitude={1.0}\n7  speed={0.5}\n8/>\n\n1import { Renderer, Program, Mesh, Color, Triangle } from \"ogl\";\n2import { useEffect, useRef } from \"react\";\n3\n4import './Aurora.css';\n5\n6const VERT = `#version 300 es\n7in vec2 position;\n8void main() {\n9  gl_Position = vec4(position, 0.0, 1.0);\n10}\n11`;\n12\n13const FRAG = `#version 300 es\n14precision highp float;\n15\n16uniform float uTime;\n17uniform float uAmplitude;\n18uniform vec3 uColorStops[3];\n19uniform vec2 uResolution;\n20uniform float uBlend;\n21\n22out vec4 fragColor;\n23\n24vec3 permute(vec3 x) {\n25  return mod(((x * 34.0) + 1.0) * x, 289.0);\n26}\n27\n28float snoise(vec2 v){\n29  const vec4 C = vec4(\n30      0.211324865405187, 0.366025403784439,\n31      -0.577350269189626, 0.024390243902439\n32  );\n33  vec2 i  = floor(v + dot(v, C.yy));\n34  vec2 x0 = v - i + dot(i, C.xx);\n35  vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n36  vec4 x12 = x0.xyxy + C.xxzz;\n37  x12.xy -= i1;\n38  i = mod(i, 289.0);\n39\n40  vec3 p = permute(\n41      permute(i.y + vec3(0.0, i1.y, 1.0))\n42    + i.x + vec3(0.0, i1.x, 1.0)\n43  );\n44\n45  vec3 m = max(\n46      0.5 - vec3(\n47          dot(x0, x0),\n48          dot(x12.xy, x12.xy),\n49          dot(x12.zw, x12.zw)\n50      ), \n51      0.0\n52  );\n53  m = m * m;\n54  m = m * m;\n55\n56  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n57  vec3 h = abs(x) - 0.5;\n58  vec3 ox = floor(x + 0.5);\n59  vec3 a0 = x - ox;\n60  m *= 1.79284291400159 - 0.85373472095314 * (a0*a0 + h*h);\n61\n62  vec3 g;\n63  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n64  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n65  return 130.0 * dot(m, g);\n66}\n67\n68struct ColorStop {\n69  vec3 color;\n70  float position;\n71};\n72\n73#define COLOR_RAMP(colors, factor, finalColor) {              \\\n74  int index = 0;                                            \\\n75  for (int i = 0; i < 2; i++) {                               \\\n76     ColorStop currentColor = colors[i];                    \\\n77     bool isInBetween = currentColor.position <= factor;    \\\n78     index = int(mix(float(index), float(i), float(isInBetween))); \\\n79  }                                                         \\\n80  ColorStop currentColor = colors[index];                   \\\n81  ColorStop nextColor = colors[index + 1];                  \\\n82  float range = nextColor.position - currentColor.position; \\\n83  float lerpFactor = (factor - currentColor.position) / range; \\\n84  finalColor = mix(currentColor.color, nextColor.color, lerpFactor); \\\n85}\n86\n87void main() {\n88  vec2 uv = gl_FragCoord.xy / uResolution;\n89  \n90  ColorStop colors[3];\n91  colors[0] = ColorStop(uColorStops[0], 0.0);\n92  colors[1] = ColorStop(uColorStops[1], 0.5);\n93  colors[2] = ColorStop(uColorStops[2], 1.0);\n94  \n95  vec3 rampColor;\n96  COLOR_RAMP(colors, uv.x, rampColor);\n97  \n98  float height = snoise(vec2(uv.x * 2.0 + uTime * 0.1, uTime * 0.25)) * 0.5 * uAmplitude;\n99  height = exp(height);\n100  height = (uv.y * 2.0 - height + 0.2);\n101  float intensity = 0.6 * height;\n102  \n103  // midPoint is fixed; uBlend controls the transition width.\n104  float midPoint = 0.20;\n105  float auroraAlpha = smoothstep(midPoint - uBlend * 0.5, midPoint + uBlend * 0.5, intensity);\n106  \n107  vec3 auroraColor = intensity * rampColor;\n108  \n109  // Premultiplied alpha output.\n110  fragColor = vec4(auroraColor * auroraAlpha, auroraAlpha);\n111}\n112`;\n113\n114export default function Aurora(props) {\n115  const {\n116    colorStops = [\"#00d8ff\", \"#7cff67\", \"#00d8ff\"],\n117    amplitude = 1.0,\n118    blend = 0.5\n119  } = props;\n120  const propsRef = useRef(props);\n121  propsRef.current = props;\n122\n123  const ctnDom = useRef(null);\n124\n125  useEffect(() => {\n126    const ctn = ctnDom.current;\n127    if (!ctn) return;\n128\n129    const renderer = new Renderer({\n130      alpha: true,\n131      premultipliedAlpha: true,\n132      antialias: true\n133    });\n134    const gl = renderer.gl;\n135    gl.clearColor(0, 0, 0, 0);\n136    gl.enable(gl.BLEND);\n137    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n138    gl.canvas.style.backgroundColor = 'transparent';\n139\n140    let program;\n141\n142    function resize() {\n143      if (!ctn) return;\n144      const width = ctn.offsetWidth;\n145      const height = ctn.offsetHeight;\n146      renderer.setSize(width, height);\n147      if (program) {\n148        program.uniforms.uResolution.value = [width, height];\n149      }\n150    }\n151    window.addEventListener(\"resize\", resize);\n152\n153    const geometry = new Triangle(gl);\n154    if (geometry.attributes.uv) {\n155      delete geometry.attributes.uv;\n156    }\n157\n158    const colorStopsArray = colorStops.map((hex) => {\n159      const c = new Color(hex);\n160      return [c.r, c.g, c.b];\n161    });\n162\n163    program = new Program(gl, {\n164      vertex: VERT,\n165      fragment: FRAG,\n166      uniforms: {\n167        uTime: { value: 0 },\n168        uAmplitude: { value: amplitude },\n169        uColorStops: { value: colorStopsArray },\n170        uResolution: { value: [ctn.offsetWidth, ctn.offsetHeight] },\n171        uBlend: { value: blend }\n172      }\n173    });\n174\n175    const mesh = new Mesh(gl, { geometry, program });\n176    ctn.appendChild(gl.canvas);\n177\n178    let animateId = 0;\n179    const update = (t) => {\n180      animateId = requestAnimationFrame(update);\n181      const { time = t * 0.01, speed = 1.0 } = propsRef.current;\n182      program.uniforms.uTime.value = time * speed * 0.1;\n183      program.uniforms.uAmplitude.value = propsRef.current.amplitude ?? 1.0;\n184      program.uniforms.uBlend.value = propsRef.current.blend ?? blend;\n185      const stops = propsRef.current.colorStops ?? colorStops;\n186      program.uniforms.uColorStops.value = stops.map((hex) => {\n187        const c = new Color(hex);\n188        return [c.r, c.g, c.b];\n189      });\n190      renderer.render({ scene: mesh });\n191    };\n192    animateId = requestAnimationFrame(update);\n193\n194    resize();\n195\n196    return () => {\n197      cancelAnimationFrame(animateId);\n198      window.removeEventListener(\"resize\", resize);\n199      if (ctn && gl.canvas.parentNode === ctn) {\n200        ctn.removeChild(gl.canvas);\n201      }\n202      gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n203    };\n204    // eslint-disable-next-line react-hooks/exhaustive-deps\n205  }, [amplitude]);\n206\n207  return <div ref={ctnDom} className=\"aurora-container\" />;\n208}\n209\n\n1.aurora-container {\n2  width: 100%;\n3  height: 100%;\n4}\n\n1import { Renderer, Program, Mesh, Color, Triangle } from \"ogl\";\n2import { useEffect, useRef } from \"react\";\n3\n4const VERT = `#version 300 es\n5in vec2 position;\n6void main() {\n7  gl_Position = vec4(position, 0.0, 1.0);\n8}\n9`;\n10\n11const FRAG = `#version 300 es\n12precision highp float;\n13\n14uniform float uTime;\n15uniform float uAmplitude;\n16uniform vec3 uColorStops[3];\n17uniform vec2 uResolution;\n18uniform float uBlend;\n19\n20out vec4 fragColor;\n21\n22vec3 permute(vec3 x) {\n23  return mod(((x * 34.0) + 1.0) * x, 289.0);\n24}\n25\n26float snoise(vec2 v){\n27  const vec4 C = vec4(\n28      0.211324865405187, 0.366025403784439,\n29      -0.577350269189626, 0.024390243902439\n30  );\n31  vec2 i  = floor(v + dot(v, C.yy));\n32  vec2 x0 = v - i + dot(i, C.xx);\n33  vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n34  vec4 x12 = x0.xyxy + C.xxzz;\n35  x12.xy -= i1;\n36  i = mod(i, 289.0);\n37\n38  vec3 p = permute(\n39      permute(i.y + vec3(0.0, i1.y, 1.0))\n40    + i.x + vec3(0.0, i1.x, 1.0)\n41  );\n42\n43  vec3 m = max(\n44      0.5 - vec3(\n45          dot(x0, x0),\n46          dot(x12.xy, x12.xy),\n47          dot(x12.zw, x12.zw)\n48      ), \n49      0.0\n50  );\n51  m = m * m;\n52  m = m * m;\n53\n54  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n55  vec3 h = abs(x) - 0.5;\n56  vec3 ox = floor(x + 0.5);\n57  vec3 a0 = x - ox;\n58  m *= 1.79284291400159 - 0.85373472095314 * (a0*a0 + h*h);\n59\n60  vec3 g;\n61  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n62  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n63  return 130.0 * dot(m, g);\n64}\n65\n66struct ColorStop {\n67  vec3 color;\n68  float position;\n69};\n70\n71#define COLOR_RAMP(colors, factor, finalColor) {              \\\n72  int index = 0;                                            \\\n73  for (int i = 0; i < 2; i++) {                               \\\n74     ColorStop currentColor = colors[i];                    \\\n75     bool isInBetween = currentColor.position <= factor;    \\\n76     index = int(mix(float(index), float(i), float(isInBetween))); \\\n77  }                                                         \\\n78  ColorStop currentColor = colors[index];                   \\\n79  ColorStop nextColor = colors[index + 1];                  \\\n80  float range = nextColor.position - currentColor.position; \\\n81  float lerpFactor = (factor - currentColor.position) / range; \\\n82  finalColor = mix(currentColor.color, nextColor.color, lerpFactor); \\\n83}\n84\n85void main() {\n86  vec2 uv = gl_FragCoord.xy / uResolution;\n87  \n88  ColorStop colors[3];\n89  colors[0] = ColorStop(uColorStops[0], 0.0);\n90  colors[1] = ColorStop(uColorStops[1], 0.5);\n91  colors[2] = ColorStop(uColorStops[2], 1.0);\n92  \n93  vec3 rampColor;\n94  COLOR_RAMP(colors, uv.x, rampColor);\n95  \n96  float height = snoise(vec2(uv.x * 2.0 + uTime * 0.1, uTime * 0.25)) * 0.5 * uAmplitude;\n97  height = exp(height);\n98  height = (uv.y * 2.0 - height + 0.2);\n99  float intensity = 0.6 * height;\n100  \n101  // midPoint is fixed; uBlend controls the transition width.\n102  float midPoint = 0.20;\n103  float auroraAlpha = smoothstep(midPoint - uBlend * 0.5, midPoint + uBlend * 0.5, intensity);\n104  \n105  vec3 auroraColor = intensity * rampColor;\n106  \n107  // Premultiplied alpha output.\n108  fragColor = vec4(auroraColor * auroraAlpha, auroraAlpha);\n109}\n110`;\n111\n112export default function Aurora(props) {\n113  const {\n114    colorStops = [\"#00d8ff\", \"#7cff67\", \"#00d8ff\"],\n115    amplitude = 1.0,\n116    blend = 0.5\n117  } = props;\n118  const propsRef = useRef(props);\n119  propsRef.current = props;\n120\n121  const ctnDom = useRef(null);\n122\n123  useEffect(() => {\n124    const ctn = ctnDom.current;\n125    if (!ctn) return;\n126\n127    const renderer = new Renderer({\n128      alpha: true,\n129      premultipliedAlpha: true,\n130      antialias: true\n131    });\n132    const gl = renderer.gl;\n133    gl.clearColor(0, 0, 0, 0);\n134    gl.enable(gl.BLEND);\n135    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n136    gl.canvas.style.backgroundColor = 'transparent';\n137\n138    let program;\n139\n140    function resize() {\n141      if (!ctn) return;\n142      const width = ctn.offsetWidth;\n143      const height = ctn.offsetHeight;\n144      renderer.setSize(width, height);\n145      if (program) {\n146        program.uniforms.uResolution.value = [width, height];\n147      }\n148    }\n149    window.addEventListener(\"resize\", resize);\n150\n151    const geometry = new Triangle(gl);\n152    if (geometry.attributes.uv) {\n153      delete geometry.attributes.uv;\n154    }\n155\n156    const colorStopsArray = colorStops.map((hex) => {\n157      const c = new Color(hex);\n158      return [c.r, c.g, c.b];\n159    });\n160\n161    program = new Program(gl, {\n162      vertex: VERT,\n163      fragment: FRAG,\n164      uniforms: {\n165        uTime: { value: 0 },\n166        uAmplitude: { value: amplitude },\n167        uColorStops: { value: colorStopsArray },\n168        uResolution: { value: [ctn.offsetWidth, ctn.offsetHeight] },\n169        uBlend: { value: blend }\n170      }\n171    });\n172\n173    const mesh = new Mesh(gl, { geometry, program });\n174    ctn.appendChild(gl.canvas);\n175\n176    let animateId = 0;\n177    const update = (t) => {\n178      animateId = requestAnimationFrame(update);\n179      const { time = t * 0.01, speed = 1.0 } = propsRef.current;\n180      program.uniforms.uTime.value = time * speed * 0.1;\n181      program.uniforms.uAmplitude.value = propsRef.current.amplitude ?? 1.0;\n182      program.uniforms.uBlend.value = propsRef.current.blend ?? blend;\n183      const stops = propsRef.current.colorStops ?? colorStops;\n184      program.uniforms.uColorStops.value = stops.map((hex) => {\n185        const c = new Color(hex);\n186        return [c.r, c.g, c.b];\n187      });\n188      renderer.render({ scene: mesh });\n189    };\n190    animateId = requestAnimationFrame(update);\n191\n192    resize();\n193\n194    return () => {\n195      cancelAnimationFrame(animateId);\n196      window.removeEventListener(\"resize\", resize);\n197      if (ctn && gl.canvas.parentNode === ctn) {\n198        ctn.removeChild(gl.canvas);\n199      }\n200      gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n201    };\n202    // eslint-disable-next-line react-hooks/exhaustive-deps\n203  }, [amplitude]);\n204\n205  return <div ref={ctnDom} className=\"w-full h-full\" />;\n206}\n207",
  "category": "backgrounds",
  "scrapedAt": "2025-04-27T11:47:35.545Z",
  "previewImage": "aurora-preview.png"
}