{
  "name": "Counter",
  "description": "An open source collection of high quality, animated, interactive & fully customizable React components for building stunning, memorable user interfaces.",
  "props": {},
  "dependencies": [],
  "previewImage": "",
  "url": "https://www.reactbits.dev/components/counter",
  "code": "1npm i framer-motion\n\n1import Counter from './Counter';\n2\n3<Counter\n4  value={1}\n5  places={[100, 10, 1]}\n6  fontSize={80}\n7  padding={5}\n8  gap={10}\n9  textColor=\"white\"\n10  fontWeight={900}\n11/>\n\n1import { motion, useSpring, useTransform } from \"framer-motion\";\n2import { useEffect } from \"react\";\n3\n4import \"./Counter.css\";\n5\n6function Number({ mv, number, height }) {\n7  let y = useTransform(mv, (latest) => {\n8    let placeValue = latest % 10;\n9    let offset = (10 + number - placeValue) % 10;\n10    let memo = offset * height;\n11    if (offset > 5) {\n12      memo -= 10 * height;\n13    }\n14    return memo;\n15  });\n16  return (\n17    <motion.span className=\"counter-number\" style={{ y }}>\n18      {number}\n19    </motion.span>\n20  );\n21}\n22\n23function Digit({ place, value, height, digitStyle }) {\n24  let valueRoundedToPlace = Math.floor(value / place);\n25  let animatedValue = useSpring(valueRoundedToPlace);\n26  useEffect(() => {\n27    animatedValue.set(valueRoundedToPlace);\n28  }, [animatedValue, valueRoundedToPlace]);\n29  return (\n30    <div className=\"counter-digit\" style={{ height, ...digitStyle }}>\n31      {Array.from({ length: 10 }, (_, i) => (\n32        <Number key={i} mv={animatedValue} number={i} height={height} />\n33      ))}\n34    </div>\n35  );\n36}\n37\n38export default function Counter({\n39  value,\n40  fontSize = 100,\n41  padding = 0,\n42  places = [100, 10, 1],\n43  gap = 8,\n44  borderRadius = 4,\n45  horizontalPadding = 8,\n46  textColor = \"white\",\n47  fontWeight = \"bold\",\n48  containerStyle,\n49  counterStyle,\n50  digitStyle,\n51  gradientHeight = 16,\n52  gradientFrom = \"black\",\n53  gradientTo = \"transparent\",\n54  topGradientStyle,\n55  bottomGradientStyle,\n56}) {\n57  const height = fontSize + padding;\n58  const defaultCounterStyle = {\n59    fontSize,\n60    gap: gap,\n61    borderRadius: borderRadius,\n62    paddingLeft: horizontalPadding,\n63    paddingRight: horizontalPadding,\n64    color: textColor,\n65    fontWeight: fontWeight,\n66  };\n67  const defaultTopGradientStyle = {\n68    height: gradientHeight,\n69    background: `linear-gradient(to bottom, ${gradientFrom}, ${gradientTo})`,\n70  };\n71  const defaultBottomGradientStyle = {\n72    height: gradientHeight,\n73    background: `linear-gradient(to top, ${gradientFrom}, ${gradientTo})`,\n74  };\n75  return (\n76    <div className=\"counter-container\" style={containerStyle}>\n77      <div\n78        className=\"counter-counter\"\n79        style={{ ...defaultCounterStyle, ...counterStyle }}\n80      >\n81        {places.map((place) => (\n82          <Digit\n83            key={place}\n84            place={place}\n85            value={value}\n86            height={height}\n87            digitStyle={digitStyle}\n88          />\n89        ))}\n90      </div>\n91      <div className=\"gradient-container\">\n92        <div\n93          className=\"top-gradient\"\n94          style={topGradientStyle ? topGradientStyle : defaultTopGradientStyle}\n95        ></div>\n96        <div\n97          className=\"bottom-gradient\"\n98          style={\n99            bottomGradientStyle\n100              ? bottomGradientStyle\n101              : defaultBottomGradientStyle\n102          }\n103        ></div>\n104      </div>\n105    </div>\n106  );\n107}\n108\n\n1.counter-container {\n2  position: relative;\n3  display: inline-block;\n4}\n5\n6.counter-counter {\n7  display: flex;\n8  overflow: hidden;\n9  line-height: 1;\n10}\n11\n12.counter-digit {\n13  position: relative;\n14  width: 1ch;\n15  font-variant-numeric: tabular-nums;\n16}\n17\n18.counter-number {\n19  position: absolute;\n20  top: 0;\n21  right: 0;\n22  bottom: 0;\n23  left: 0;\n24  display: flex;\n25  align-items: center;\n26  justify-content: center;\n27}\n28\n29.gradient-container {\n30  pointer-events: none;\n31  position: absolute;\n32  top: 0;\n33  bottom: 0;\n34  left: 0;\n35  right: 0;\n36}\n37\n38.bottom-gradient {\n39  position: absolute;\n40  bottom: 0;\n41  width: 100%;\n42}\n\n1import { motion, useSpring, useTransform } from \"framer-motion\";\n2import { useEffect } from \"react\";\n3\n4function Number({ mv, number, height }) {\n5  let y = useTransform(mv, (latest) => {\n6    let placeValue = latest % 10;\n7    let offset = (10 + number - placeValue) % 10;\n8    let memo = offset * height;\n9    if (offset > 5) {\n10      memo -= 10 * height;\n11    }\n12    return memo;\n13  });\n14\n15  const style = {\n16    position: \"absolute\",\n17    top: 0,\n18    right: 0,\n19    bottom: 0,\n20    left: 0,\n21    display: \"flex\",\n22    alignItems: \"center\",\n23    justifyContent: \"center\",\n24  };\n25\n26  return <motion.span style={{ ...style, y }}>{number}</motion.span>;\n27}\n28\n29function Digit({ place, value, height, digitStyle }) {\n30  let valueRoundedToPlace = Math.floor(value / place);\n31  let animatedValue = useSpring(valueRoundedToPlace);\n32\n33  useEffect(() => {\n34    animatedValue.set(valueRoundedToPlace);\n35  }, [animatedValue, valueRoundedToPlace]);\n36\n37  const defaultStyle = {\n38    height,\n39    position: \"relative\",\n40    width: \"1ch\",\n41    fontVariantNumeric: \"tabular-nums\",\n42  };\n43\n44  return (\n45    <div style={{ ...defaultStyle, ...digitStyle }}>\n46      {Array.from({ length: 10 }, (_, i) => (\n47        <Number key={i} mv={animatedValue} number={i} height={height} />\n48      ))}\n49    </div>\n50  );\n51}\n52\n53export default function Counter({\n54  value,\n55  fontSize = 100,\n56  padding = 0,\n57  places = [100, 10, 1],\n58  gap = 8,\n59  borderRadius = 4,\n60  horizontalPadding = 8,\n61  textColor = \"white\",\n62  fontWeight = \"bold\",\n63  containerStyle,\n64  counterStyle,\n65  digitStyle,\n66  gradientHeight = 16,\n67  gradientFrom = \"black\",\n68  gradientTo = \"transparent\",\n69  topGradientStyle,\n70  bottomGradientStyle,\n71}) {\n72  const height = fontSize + padding;\n73\n74  const defaultContainerStyle = {\n75    position: \"relative\",\n76    display: \"inline-block\",\n77  };\n78\n79  const defaultCounterStyle = {\n80    fontSize,\n81    display: \"flex\",\n82    gap: gap,\n83    overflow: \"hidden\",\n84    borderRadius: borderRadius,\n85    paddingLeft: horizontalPadding,\n86    paddingRight: horizontalPadding,\n87    lineHeight: 1,\n88    color: textColor,\n89    fontWeight: fontWeight,\n90  };\n91\n92  const gradientContainerStyle = {\n93    pointerEvents: \"none\",\n94    position: \"absolute\",\n95    top: 0,\n96    bottom: 0,\n97    left: 0,\n98    right: 0,\n99  };\n100\n101  const defaultTopGradientStyle = {\n102    height: gradientHeight,\n103    background: `linear-gradient(to bottom, ${gradientFrom}, ${gradientTo})`,\n104  };\n105\n106  const defaultBottomGradientStyle = {\n107    position: \"absolute\",\n108    bottom: 0,\n109    width: \"100%\",\n110    height: gradientHeight,\n111    background: `linear-gradient(to top, ${gradientFrom}, ${gradientTo})`,\n112  };\n113\n114  return (\n115    <div style={{ ...defaultContainerStyle, ...containerStyle }}>\n116      <div style={{ ...defaultCounterStyle, ...counterStyle }}>\n117        {places.map((place) => (\n118          <Digit\n119            key={place}\n120            place={place}\n121            value={value}\n122            height={height}\n123            digitStyle={digitStyle}\n124          />\n125        ))}\n126      </div>\n127      <div style={gradientContainerStyle}>\n128        <div\n129          style={topGradientStyle ? topGradientStyle : defaultTopGradientStyle}\n130        />\n131        <div\n132          style={\n133            bottomGradientStyle\n134              ? bottomGradientStyle\n135              : defaultBottomGradientStyle\n136          }\n137        />\n138      </div>\n139    </div>\n140  );\n141}\n142"
}