{
  "name": "Carousel",
  "description": "An open source collection of high quality, animated, interactive & fully customizable React components for building stunning, memorable user interfaces.",
  "props": {},
  "dependencies": [],
  "url": "https://www.reactbits.dev/components/carousel",
  "code": "1npm install framer-motion\n\n1import Carousel from './Carousel'\n2\n3<div style={{ height: '600px', position: 'relative' }}>\n4  <Carousel\n5    baseWidth={300}\n6    autoplay={true}\n7    autoplayDelay={3000}\n8    pauseOnHover={true}\n9    loop={true}\n10    round={false}\n11  />\n12</div>\n\n1import { useEffect, useState, useRef } from \"react\";\n2import { motion, useMotionValue, useTransform } from \"framer-motion\";\n3// replace icons with your own if needed\n4import { FiCircle, FiCode, FiFileText, FiLayers, FiLayout } from \"react-icons/fi\";\n5\n6import \"./Carousel.css\";\n7\n8const DEFAULT_ITEMS = [\n9  {\n10    title: \"Text Animations\",\n11    description: \"Cool text animations for your projects.\",\n12    id: 1,\n13    icon: <FiFileText className=\"carousel-icon\" />,\n14  },\n15  {\n16    title: \"Animations\",\n17    description: \"Smooth animations for your projects.\",\n18    id: 2,\n19    icon: <FiCircle className=\"carousel-icon\" />,\n20  },\n21  {\n22    title: \"Components\",\n23    description: \"Reusable components for your projects.\",\n24    id: 3,\n25    icon: <FiLayers className=\"carousel-icon\" />,\n26  },\n27  {\n28    title: \"Backgrounds\",\n29    description: \"Beautiful backgrounds and patterns for your projects.\",\n30    id: 4,\n31    icon: <FiLayout className=\"carousel-icon\" />,\n32  },\n33  {\n34    title: \"Common UI\",\n35    description: \"Common UI components are coming soon!\",\n36    id: 5,\n37    icon: <FiCode className=\"carousel-icon\" />,\n38  },\n39];\n40\n41const DRAG_BUFFER = 0;\n42const VELOCITY_THRESHOLD = 500;\n43const GAP = 16;\n44const SPRING_OPTIONS = { type: \"spring\", stiffness: 300, damping: 30 };\n45\n46export default function Carousel({\n47  items = DEFAULT_ITEMS,\n48  baseWidth = 300,\n49  autoplay = false,\n50  autoplayDelay = 3000,\n51  pauseOnHover = false,\n52  loop = false,\n53  round = false,\n54}) {\n55  const containerPadding = 16;\n56  const itemWidth = baseWidth - containerPadding * 2;\n57  const trackItemOffset = itemWidth + GAP;\n58\n59  const carouselItems = loop ? [...items, items[0]] : items;\n60  const [currentIndex, setCurrentIndex] = useState(0);\n61  const x = useMotionValue(0);\n62  const [isHovered, setIsHovered] = useState(false);\n63  const [isResetting, setIsResetting] = useState(false);\n64\n65  const containerRef = useRef(null);\n66  useEffect(() => {\n67    if (pauseOnHover && containerRef.current) {\n68      const container = containerRef.current;\n69      const handleMouseEnter = () => setIsHovered(true);\n70      const handleMouseLeave = () => setIsHovered(false);\n71      container.addEventListener(\"mouseenter\", handleMouseEnter);\n72      container.addEventListener(\"mouseleave\", handleMouseLeave);\n73      return () => {\n74        container.removeEventListener(\"mouseenter\", handleMouseEnter);\n75        container.removeEventListener(\"mouseleave\", handleMouseLeave);\n76      };\n77    }\n78  }, [pauseOnHover]);\n79\n80  useEffect(() => {\n81    if (autoplay && (!pauseOnHover || !isHovered)) {\n82      const timer = setInterval(() => {\n83        setCurrentIndex((prev) => {\n84          if (prev === items.length - 1 && loop) {\n85            return prev + 1;\n86          }\n87          if (prev === carouselItems.length - 1) {\n88            return loop ? 0 : prev;\n89          }\n90          return prev + 1;\n91        });\n92      }, autoplayDelay);\n93      return () => clearInterval(timer);\n94    }\n95  }, [\n96    autoplay,\n97    autoplayDelay,\n98    isHovered,\n99    loop,\n100    items.length,\n101    carouselItems.length,\n102    pauseOnHover,\n103  ]);\n104\n105  const effectiveTransition = isResetting ? { duration: 0 } : SPRING_OPTIONS;\n106\n107  const handleAnimationComplete = () => {\n108    if (loop && currentIndex === carouselItems.length - 1) {\n109      setIsResetting(true);\n110      x.set(0);\n111      setCurrentIndex(0);\n112      setTimeout(() => setIsResetting(false), 50);\n113    }\n114  };\n115\n116  const handleDragEnd = (_, info) => {\n117    const offset = info.offset.x;\n118    const velocity = info.velocity.x;\n119    if (offset < -DRAG_BUFFER || velocity < -VELOCITY_THRESHOLD) {\n120      if (loop && currentIndex === items.length - 1) {\n121        setCurrentIndex(currentIndex + 1); // Go to clone.\n122      } else {\n123        setCurrentIndex((prev) => Math.min(prev + 1, carouselItems.length - 1));\n124      }\n125    } else if (offset > DRAG_BUFFER || velocity > VELOCITY_THRESHOLD) {\n126      if (loop && currentIndex === 0) {\n127        setCurrentIndex(items.length - 1);\n128      } else {\n129        setCurrentIndex((prev) => Math.max(prev - 1, 0));\n130      }\n131    }\n132  };\n133\n134  const dragProps = loop\n135    ? {}\n136    : {\n137      dragConstraints: {\n138        left: -trackItemOffset * (carouselItems.length - 1),\n139        right: 0,\n140      },\n141    };\n142\n143  return (\n144    <div\n145      ref={containerRef}\n146      className={`carousel-container ${round ? \"round\" : \"\"}`}\n147      style={{\n148        width: `${baseWidth}px`,\n149        ...(round && { height: `${baseWidth}px`, borderRadius: \"50%\" }),\n150      }}\n151    >\n152      <motion.div\n153        className=\"carousel-track\"\n154        drag=\"x\"\n155        {...dragProps}\n156        style={{\n157          width: itemWidth,\n158          gap: `${GAP}px`,\n159          perspective: 1000,\n160          perspectiveOrigin: `${currentIndex * trackItemOffset + itemWidth / 2}px 50%`,\n161          x,\n162        }}\n163        onDragEnd={handleDragEnd}\n164        animate={{ x: -(currentIndex * trackItemOffset) }}\n165        transition={effectiveTransition}\n166        onAnimationComplete={handleAnimationComplete}\n167      >\n168        {carouselItems.map((item, index) => {\n169          const range = [\n170            -(index + 1) * trackItemOffset,\n171            -index * trackItemOffset,\n172            -(index - 1) * trackItemOffset,\n173          ];\n174          const outputRange = [90, 0, -90];\n175          // eslint-disable-next-line react-hooks/rules-of-hooks\n176          const rotateY = useTransform(x, range, outputRange, { clamp: false });\n177          return (\n178            <motion.div\n179              key={index}\n180              className={`carousel-item ${round ? \"round\" : \"\"}`}\n181              style={{\n182                width: itemWidth,\n183                height: round ? itemWidth : \"100%\",\n184                rotateY: rotateY,\n185                ...(round && { borderRadius: \"50%\" }),\n186              }}\n187              transition={effectiveTransition}\n188            >\n189              <div className={`carousel-item-header ${round ? \"round\" : \"\"}`}>\n190                <span className=\"carousel-icon-container\">\n191                  {item.icon}\n192                </span>\n193              </div>\n194              <div className=\"carousel-item-content\">\n195                <div className=\"carousel-item-title\">{item.title}</div>\n196                <p className=\"carousel-item-description\">{item.description}</p>\n197              </div>\n198            </motion.div>\n199          );\n200        })}\n201      </motion.div>\n202      <div className={`carousel-indicators-container ${round ? \"round\" : \"\"}`}>\n203        <div className=\"carousel-indicators\">\n204          {items.map((_, index) => (\n205            <motion.div\n206              key={index}\n207              className={`carousel-indicator ${currentIndex % items.length === index ? \"active\" : \"inactive\"\n208                }`}\n209              animate={{\n210                scale: currentIndex % items.length === index ? 1.2 : 1,\n211              }}\n212              onClick={() => setCurrentIndex(index)}\n213              transition={{ duration: 0.15 }}\n214            />\n215          ))}\n216        </div>\n217      </div>\n218    </div>\n219  );\n220}\n221\n\n1/* Container */\n2.carousel-container {\n3  position: relative;\n4  overflow: hidden;\n5  border: 1px solid #555;\n6  border-radius: 24px;\n7  padding: 16px;\n8  /* This padding is taken into account for item width */\n9  --outer-r: 24px;\n10  --p-distance: 12px;\n11}\n12\n13/* Track */\n14.carousel-track {\n15  display: flex;\n16}\n17\n18/* Carousel item */\n19.carousel-item {\n20  position: relative;\n21  display: flex;\n22  flex-shrink: 0;\n23  flex-direction: column;\n24  align-items: flex-start;\n25  justify-content: space-between;\n26  border: 1px solid #555;\n27  border-radius: calc(var(--outer-r) - var(--p-distance));\n28  background-color: #0D0D0D;\n29  overflow: hidden;\n30  cursor: grab;\n31}\n32\n33.carousel-item:active {\n34  cursor: grabbing;\n35}\n36\n37.carousel-container.round {\n38  border: 1px solid #555;\n39}\n40\n41.carousel-item.round {\n42  background-color: #0D0D0D;\n43  position: relative;\n44  bottom: .1em;\n45  border: 1px solid #555;\n46  justify-content: center;\n47  align-items: center;\n48  text-align: center;\n49}\n50\n51.carousel-item-header.round {\n52  padding: 0;\n53  margin: 0;\n54}\n55\n56.carousel-indicators-container.round {\n57  position: absolute;\n58  z-index: 2;\n59  bottom: 3em;\n60  left: 50%;\n61  transform: translateX(-50%);\n62}\n63\n64.carousel-indicator.active {\n65  background-color: #333333;\n66}\n67\n68.carousel-indicator.inactive {\n69  background-color: rgba(51, 51, 51, 0.4);\n70}\n71\n72.carousel-item-header {\n73  margin-bottom: 16px;\n74  padding: 20px;\n75  padding-top: 20px;\n76}\n77\n78.carousel-icon-container {\n79  display: flex;\n80  height: 28px;\n81  width: 28px;\n82  align-items: center;\n83  justify-content: center;\n84  border-radius: 50%;\n85  background-color: #fff;\n86}\n87\n88.carousel-icon {\n89  height: 16px;\n90  width: 16px;\n91  color: #060606;\n92}\n93\n94.carousel-item-content {\n95  padding: 20px;\n96  padding-bottom: 20px;\n97}\n98\n99.carousel-item-title {\n100  margin-bottom: 4px;\n101  font-weight: 900;\n102  font-size: 18px;\n103  color: #fff;\n104}\n105\n106.carousel-item-description {\n107  font-size: 14px;\n108  color: #fff;\n109}\n110\n111/* Indicators */\n112.carousel-indicators-container {\n113  display: flex;\n114  width: 100%;\n115  justify-content: center;\n116}\n117\n118.carousel-indicators {\n119  margin-top: 16px;\n120  display: flex;\n121  width: 150px;\n122  justify-content: space-between;\n123  padding: 0 32px;\n124}\n125\n126.carousel-indicator {\n127  height: 8px;\n128  width: 8px;\n129  border-radius: 50%;\n130  cursor: pointer;\n131  transition: background-color 150ms;\n132}\n133\n134.carousel-indicator.active {\n135  background-color: #fff;\n136}\n137\n138.carousel-indicator.inactive {\n139  background-color: #555;\n140}\n\n1import { useEffect, useState, useRef } from \"react\";\n2import { motion, useMotionValue, useTransform } from \"framer-motion\";\n3// replace icons with your own if needed\n4import {\n5  FiCircle,\n6  FiCode,\n7  FiFileText,\n8  FiLayers,\n9  FiLayout,\n10} from \"react-icons/fi\";\n11\n12const DEFAULT_ITEMS = [\n13  {\n14    title: \"Text Animations\",\n15    description: \"Cool text animations for your projects.\",\n16    id: 1,\n17    icon: <FiFileText className=\"h-[16px] w-[16px] text-white\" />,\n18  },\n19  {\n20    title: \"Animations\",\n21    description: \"Smooth animations for your projects.\",\n22    id: 2,\n23    icon: <FiCircle className=\"h-[16px] w-[16px] text-white\" />,\n24  },\n25  {\n26    title: \"Components\",\n27    description: \"Reusable components for your projects.\",\n28    id: 3,\n29    icon: <FiLayers className=\"h-[16px] w-[16px] text-white\" />,\n30  },\n31  {\n32    title: \"Backgrounds\",\n33    description: \"Beautiful backgrounds and patterns for your projects.\",\n34    id: 4,\n35    icon: <FiLayout className=\"h-[16px] w-[16px] text-white\" />,\n36  },\n37  {\n38    title: \"Common UI\",\n39    description: \"Common UI components are coming soon!\",\n40    id: 5,\n41    icon: <FiCode className=\"h-[16px] w-[16px] text-white\" />,\n42  },\n43];\n44\n45const DRAG_BUFFER = 0;\n46const VELOCITY_THRESHOLD = 500;\n47const GAP = 16;\n48const SPRING_OPTIONS = { type: \"spring\", stiffness: 300, damping: 30 };\n49\n50export default function Carousel({\n51  items = DEFAULT_ITEMS,\n52  baseWidth = 300,\n53  autoplay = false,\n54  autoplayDelay = 3000,\n55  pauseOnHover = false,\n56  loop = false,\n57  round = false,\n58}) {\n59  const containerPadding = 16;\n60  const itemWidth = baseWidth - containerPadding * 2;\n61  const trackItemOffset = itemWidth + GAP;\n62\n63  const carouselItems = loop ? [...items, items[0]] : items;\n64  const [currentIndex, setCurrentIndex] = useState(0);\n65  const x = useMotionValue(0);\n66  const [isHovered, setIsHovered] = useState(false);\n67  const [isResetting, setIsResetting] = useState(false);\n68\n69  const containerRef = useRef(null);\n70  useEffect(() => {\n71    if (pauseOnHover && containerRef.current) {\n72      const container = containerRef.current;\n73      const handleMouseEnter = () => setIsHovered(true);\n74      const handleMouseLeave = () => setIsHovered(false);\n75      container.addEventListener(\"mouseenter\", handleMouseEnter);\n76      container.addEventListener(\"mouseleave\", handleMouseLeave);\n77      return () => {\n78        container.removeEventListener(\"mouseenter\", handleMouseEnter);\n79        container.removeEventListener(\"mouseleave\", handleMouseLeave);\n80      };\n81    }\n82  }, [pauseOnHover]);\n83\n84  useEffect(() => {\n85    if (autoplay && (!pauseOnHover || !isHovered)) {\n86      const timer = setInterval(() => {\n87        setCurrentIndex((prev) => {\n88          if (prev === items.length - 1 && loop) {\n89            return prev + 1; // Animate to clone.\n90          }\n91          if (prev === carouselItems.length - 1) {\n92            return loop ? 0 : prev;\n93          }\n94          return prev + 1;\n95        });\n96      }, autoplayDelay);\n97      return () => clearInterval(timer);\n98    }\n99  }, [\n100    autoplay,\n101    autoplayDelay,\n102    isHovered,\n103    loop,\n104    items.length,\n105    carouselItems.length,\n106    pauseOnHover,\n107  ]);\n108\n109  const effectiveTransition = isResetting ? { duration: 0 } : SPRING_OPTIONS;\n110\n111  const handleAnimationComplete = () => {\n112    if (loop && currentIndex === carouselItems.length - 1) {\n113      setIsResetting(true);\n114      x.set(0);\n115      setCurrentIndex(0);\n116      setTimeout(() => setIsResetting(false), 50);\n117    }\n118  };\n119\n120  const handleDragEnd = (_, info) => {\n121    const offset = info.offset.x;\n122    const velocity = info.velocity.x;\n123    if (offset < -DRAG_BUFFER || velocity < -VELOCITY_THRESHOLD) {\n124      if (loop && currentIndex === items.length - 1) {\n125        setCurrentIndex(currentIndex + 1);\n126      } else {\n127        setCurrentIndex((prev) => Math.min(prev + 1, carouselItems.length - 1));\n128      }\n129    } else if (offset > DRAG_BUFFER || velocity > VELOCITY_THRESHOLD) {\n130      if (loop && currentIndex === 0) {\n131        setCurrentIndex(items.length - 1);\n132      } else {\n133        setCurrentIndex((prev) => Math.max(prev - 1, 0));\n134      }\n135    }\n136  };\n137\n138  const dragProps = loop\n139    ? {}\n140    : {\n141      dragConstraints: {\n142        left: -trackItemOffset * (carouselItems.length - 1),\n143        right: 0,\n144      },\n145    };\n146\n147  return (\n148    <div\n149      ref={containerRef}\n150      className={`relative overflow-hidden p-4 ${round\n151        ? \"rounded-full border border-white\"\n152        : \"rounded-[24px] border border-[#222]\"\n153        }`}\n154      style={{\n155        width: `${baseWidth}px`,\n156        ...(round && { height: `${baseWidth}px` }),\n157      }}\n158    >\n159      <motion.div\n160        className=\"flex\"\n161        drag=\"x\"\n162        {...dragProps}\n163        style={{\n164          width: itemWidth,\n165          gap: `${GAP}px`,\n166          perspective: 1000,\n167          perspectiveOrigin: `${currentIndex * trackItemOffset + itemWidth / 2}px 50%`,\n168          x,\n169        }}\n170        onDragEnd={handleDragEnd}\n171        animate={{ x: -(currentIndex * trackItemOffset) }}\n172        transition={effectiveTransition}\n173        onAnimationComplete={handleAnimationComplete}\n174      >\n175        {carouselItems.map((item, index) => {\n176          const range = [\n177            -(index + 1) * trackItemOffset,\n178            -index * trackItemOffset,\n179            -(index - 1) * trackItemOffset,\n180          ];\n181          const outputRange = [90, 0, -90];\n182          // eslint-disable-next-line react-hooks/rules-of-hooks\n183          const rotateY = useTransform(x, range, outputRange, { clamp: false });\n184          return (\n185            <motion.div\n186              key={index}\n187              className={`relative shrink-0 flex flex-col ${round\n188                ? \"items-center justify-center text-center bg-[#060606] border-0\"\n189                : \"items-start justify-between bg-[#222] border border-[#222] rounded-[12px]\"\n190                } overflow-hidden cursor-grab active:cursor-grabbing`}\n191              style={{\n192                width: itemWidth,\n193                height: round ? itemWidth : \"100%\",\n194                rotateY: rotateY,\n195                ...(round && { borderRadius: \"50%\" }),\n196              }}\n197              transition={effectiveTransition}\n198            >\n199              <div className={`${round ? \"p-0 m-0\" : \"mb-4 p-5\"}`}>\n200                <span className=\"flex h-[28px] w-[28px] items-center justify-center rounded-full bg-[#060606]\">\n201                  {item.icon}\n202                </span>\n203              </div>\n204              <div className=\"p-5\">\n205                <div className=\"mb-1 font-black text-lg text-white\">\n206                  {item.title}\n207                </div>\n208                <p className=\"text-sm text-white\">{item.description}</p>\n209              </div>\n210            </motion.div>\n211          );\n212        })}\n213      </motion.div>\n214      <div\n215        className={`flex w-full justify-center ${round ? \"absolute z-20 bottom-12 left-1/2 -translate-x-1/2\" : \"\"\n216          }`}\n217      >\n218        <div className=\"mt-4 flex w-[150px] justify-between px-8\">\n219          {items.map((_, index) => (\n220            <motion.div\n221              key={index}\n222              className={`h-2 w-2 rounded-full cursor-pointer transition-colors duration-150 ${currentIndex % items.length === index\n223                ? round\n224                  ? \"bg-white\"\n225                  : \"bg-[#333333]\"\n226                : round\n227                  ? \"bg-[#555]\"\n228                  : \"bg-[rgba(51,51,51,0.4)]\"\n229                }`}\n230              animate={{\n231                scale: currentIndex % items.length === index ? 1.2 : 1,\n232              }}\n233              onClick={() => setCurrentIndex(index)}\n234              transition={{ duration: 0.15 }}\n235            />\n236          ))}\n237        </div>\n238      </div>\n239    </div>\n240  );\n241}\n242",
  "category": "components",
  "scrapedAt": "2025-04-27T11:46:53.556Z",
  "previewImage": "carousel-preview.png"
}