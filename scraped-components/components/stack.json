{
  "name": "Stack",
  "description": "An open source collection of high quality, animated, interactive & fully customizable React components for building stunning, memorable user interfaces.",
  "props": {},
  "dependencies": [],
  "url": "https://www.reactbits.dev/components/stack",
  "code": "1npm i framer-motion\n\n1import Stack from './Stack'\n2\n3const images = [\n4  { id: 1, img: \"https://images.unsplash.com/photo-1480074568708-e7b720bb3f09?q=80&w=500&auto=format\" },\n5  { id: 2, img: \"https://images.unsplash.com/photo-1449844908441-8829872d2607?q=80&w=500&auto=format\" },\n6  { id: 3, img: \"https://images.unsplash.com/photo-1452626212852-811d58933cae?q=80&w=500&auto=format\" },\n7  { id: 4, img: \"https://images.unsplash.com/photo-1572120360610-d971b9d7767c?q=80&w=500&auto=format\" }\n8];\n9  \n10<Stack\n11  randomRotation={true}\n12  sensitivity={180}\n13  sendToBackOnClick={false}\n14  cardDimensions={{ width: 200, height: 200 }}\n15  cardsData={images}\n16/>\n\n1import { motion, useMotionValue, useTransform } from \"framer-motion\";\n2import { useState } from \"react\";\n3import \"./Stack.css\";\n4\n5function CardRotate({ children, onSendToBack, sensitivity }) {\n6  const x = useMotionValue(0);\n7  const y = useMotionValue(0);\n8  const rotateX = useTransform(y, [-100, 100], [60, -60]);\n9  const rotateY = useTransform(x, [-100, 100], [-60, 60]);\n10\n11  function handleDragEnd(_, info) {\n12    if (\n13      Math.abs(info.offset.x) > sensitivity ||\n14      Math.abs(info.offset.y) > sensitivity\n15    ) {\n16      onSendToBack();\n17    } else {\n18      x.set(0);\n19      y.set(0);\n20    }\n21  }\n22\n23  return (\n24    <motion.div\n25      className=\"card-rotate\"\n26      style={{ x, y, rotateX, rotateY }}\n27      drag\n28      dragConstraints={{ top: 0, right: 0, bottom: 0, left: 0 }}\n29      dragElastic={0.6}\n30      whileTap={{ cursor: \"grabbing\" }}\n31      onDragEnd={handleDragEnd}\n32    >\n33      {children}\n34    </motion.div>\n35  );\n36}\n37\n38export default function Stack({\n39  randomRotation = false,\n40  sensitivity = 200,\n41  cardDimensions = { width: 208, height: 208 },\n42  cardsData = [],\n43  animationConfig = { stiffness: 260, damping: 20 },\n44  sendToBackOnClick = false\n45}) {\n46  const [cards, setCards] = useState(\n47    cardsData.length\n48      ? cardsData\n49      : [\n50        { id: 1, img: \"https://images.unsplash.com/photo-1480074568708-e7b720bb3f09?q=80&w=500&auto=format\" },\n51        { id: 2, img: \"https://images.unsplash.com/photo-1449844908441-8829872d2607?q=80&w=500&auto=format\" },\n52        { id: 3, img: \"https://images.unsplash.com/photo-1452626212852-811d58933cae?q=80&w=500&auto=format\" },\n53        { id: 4, img: \"https://images.unsplash.com/photo-1572120360610-d971b9d7767c?q=80&w=500&auto=format\" }\n54      ]\n55  );\n56\n57  const sendToBack = (id) => {\n58    setCards((prev) => {\n59      const newCards = [...prev];\n60      const index = newCards.findIndex((card) => card.id === id);\n61      const [card] = newCards.splice(index, 1);\n62      newCards.unshift(card);\n63      return newCards;\n64    });\n65  };\n66\n67  return (\n68    <div\n69      className=\"stack-container\"\n70      style={{\n71        width: cardDimensions.width,\n72        height: cardDimensions.height,\n73        perspective: 600,\n74      }}\n75    >\n76      {cards.map((card, index) => {\n77        const randomRotate = randomRotation\n78          ? Math.random() * 10 - 5 // Random degree between -5 and 5\n79          : 0;\n80\n81        return (\n82          <CardRotate\n83            key={card.id}\n84            onSendToBack={() => sendToBack(card.id)}\n85            sensitivity={sensitivity}\n86          >\n87            <motion.div\n88              className=\"card\"\n89              onClick={() => sendToBackOnClick && sendToBack(card.id)}\n90              animate={{\n91                rotateZ: (cards.length - index - 1) * 4 + randomRotate,\n92                scale: 1 + index * 0.06 - cards.length * 0.06,\n93                transformOrigin: \"90% 90%\",\n94              }}\n95              initial={false}\n96              transition={{\n97                type: \"spring\",\n98                stiffness: animationConfig.stiffness,\n99                damping: animationConfig.damping,\n100              }}\n101              style={{\n102                width: cardDimensions.width,\n103                height: cardDimensions.height,\n104              }}\n105            >\n106              <img\n107                src={card.img}\n108                alt={`card-${card.id}`}\n109                className=\"card-image\"\n110              />\n111            </motion.div>\n112          </CardRotate>\n113        );\n114      })}\n115    </div>\n116  );\n117}\n118\n\n1.stack-container {\n2  position: relative;\n3  perspective: 600px;\n4}\n5\n6.card-rotate {\n7  position: absolute;\n8  cursor: grab;\n9}\n10\n11.card {\n12  border-radius: 20px;\n13  border: 5px solid #fff;\n14  overflow: hidden;\n15}\n16\n17.card-image {\n18  pointer-events: none;\n19  width: 100%;\n20  height: 100%;\n21  object-fit: cover;\n22}\n\n1import { motion, useMotionValue, useTransform } from \"framer-motion\";\n2import { useState } from \"react\";\n3\n4function CardRotate({ children, onSendToBack, sensitivity }) {\n5  const x = useMotionValue(0);\n6  const y = useMotionValue(0);\n7  const rotateX = useTransform(y, [-100, 100], [60, -60]);\n8  const rotateY = useTransform(x, [-100, 100], [-60, 60]);\n9\n10  function handleDragEnd(_, info) {\n11    if (\n12      Math.abs(info.offset.x) > sensitivity ||\n13      Math.abs(info.offset.y) > sensitivity\n14    ) {\n15      onSendToBack();\n16    } else {\n17      x.set(0);\n18      y.set(0);\n19    }\n20  }\n21\n22  return (\n23    <motion.div\n24      className=\"absolute cursor-grab\"\n25      style={{ x, y, rotateX, rotateY }}\n26      drag\n27      dragConstraints={{ top: 0, right: 0, bottom: 0, left: 0 }}\n28      dragElastic={0.6}\n29      whileTap={{ cursor: \"grabbing\" }}\n30      onDragEnd={handleDragEnd}\n31    >\n32      {children}\n33    </motion.div>\n34  );\n35}\n36\n37export default function Stack({\n38  randomRotation = false,\n39  sensitivity = 200,\n40  cardDimensions = { width: 208, height: 208 },\n41  cardsData = [],\n42  animationConfig = { stiffness: 260, damping: 20 },\n43  sendToBackOnClick = false\n44}) {\n45  const [cards, setCards] = useState(\n46    cardsData.length\n47      ? cardsData\n48      : [\n49        { id: 1, img: \"https://images.unsplash.com/photo-1480074568708-e7b720bb3f09?q=80&w=500&auto=format\" },\n50        { id: 2, img: \"https://images.unsplash.com/photo-1449844908441-8829872d2607?q=80&w=500&auto=format\" },\n51        { id: 3, img: \"https://images.unsplash.com/photo-1452626212852-811d58933cae?q=80&w=500&auto=format\" },\n52        { id: 4, img: \"https://images.unsplash.com/photo-1572120360610-d971b9d7767c?q=80&w=500&auto=format\" }\n53      ]\n54  );\n55\n56  const sendToBack = (id) => {\n57    setCards((prev) => {\n58      const newCards = [...prev];\n59      const index = newCards.findIndex((card) => card.id === id);\n60      const [card] = newCards.splice(index, 1);\n61      newCards.unshift(card);\n62      return newCards;\n63    });\n64  };\n65\n66  return (\n67    <div\n68      className=\"relative\"\n69      style={{\n70        width: cardDimensions.width,\n71        height: cardDimensions.height,\n72        perspective: 600,\n73      }}\n74    >\n75      {cards.map((card, index) => {\n76        const randomRotate = randomRotation\n77          ? Math.random() * 10 - 5 // Random degree between -5 and 5\n78          : 0;\n79\n80        return (\n81          <CardRotate\n82            key={card.id}\n83            onSendToBack={() => sendToBack(card.id)}\n84            sensitivity={sensitivity}\n85          >\n86            <motion.div\n87              className=\"rounded-2xl overflow-hidden border-4 border-white\"\n88              onClick={() => sendToBackOnClick && sendToBack(card.id)}\n89              animate={{\n90                rotateZ: (cards.length - index - 1) * 4 + randomRotate,\n91                scale: 1 + index * 0.06 - cards.length * 0.06,\n92                transformOrigin: \"90% 90%\",\n93              }}\n94              initial={false}\n95              transition={{\n96                type: \"spring\",\n97                stiffness: animationConfig.stiffness,\n98                damping: animationConfig.damping,\n99              }}\n100              style={{\n101                width: cardDimensions.width,\n102                height: cardDimensions.height,\n103              }}\n104            >\n105              <img\n106                src={card.img}\n107                alt={`card-${card.id}`}\n108                className=\"w-full h-full object-cover pointer-events-none\"\n109              />\n110            </motion.div>\n111          </CardRotate>\n112        );\n113      })}\n114    </div>\n115  );\n116}",
  "category": "components",
  "scrapedAt": "2025-04-27T11:46:59.091Z",
  "previewImage": "stack-preview.png"
}