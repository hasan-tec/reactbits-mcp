{
  "name": "Stepper",
  "description": "An open source collection of high quality, animated, interactive & fully customizable React components for building stunning, memorable user interfaces.",
  "props": {},
  "dependencies": [],
  "previewImage": "",
  "url": "https://www.reactbits.dev/components/stepper",
  "code": "1npm i framer-motion\n\n1import Stepper, { Step } from './Stepper';\n2  \n3<Stepper\n4  initialStep={1}\n5  onStepChange={(step) => {\n6    console.log(step);\n7  }}\n8  onFinalStepCompleted={() => console.log(\"All steps completed!\")}\n9  backButtonText=\"Previous\"\n10  nextButtonText=\"Next\"\n11>\n12  <Step>\n13    <h2>Welcome to the React Bits stepper!</h2>\n14    <p>Check out the next step!</p>\n15  </Step>\n16  <Step>\n17    <h2>Step 2</h2>\n18    <img style={{ height: '100px', width: '100%', objectFit: 'cover', objectPosition: 'center -70px', borderRadius: '15px', marginTop: '1em' }} src=\"https://www.purrfectcatgifts.co.uk/cdn/shop/collections/Funny_Cat_Cards_640x640.png?v=1663150894\" />\n19    <p>Custom step content!</p>\n20  </Step>\n21  <Step>\n22    <h2>How about an input?</h2>\n23    <input value={name} onChange={(e) => setName(e.target.value)} placeholder=\"Your name?\" />\n24  </Step>\n25  <Step>\n26    <h2>Final Step</h2>\n27    <p>You made it!</p>\n28  </Step>\n29</Stepper>\n\n1import React, { useState, Children, useRef, useLayoutEffect } from \"react\";\n2import { motion, AnimatePresence } from \"framer-motion\";\n3\n4import \"./Stepper.css\";\n5\n6export default function Stepper({\n7  children,\n8  initialStep = 1,\n9  onStepChange = () => { },\n10  onFinalStepCompleted = () => { },\n11  stepCircleContainerClassName = \"\",\n12  stepContainerClassName = \"\",\n13  contentClassName = \"\",\n14  footerClassName = \"\",\n15  backButtonProps = {},\n16  nextButtonProps = {},\n17  backButtonText = \"Back\",\n18  nextButtonText = \"Continue\",\n19  disableStepIndicators = false,\n20  renderStepIndicator,\n21  ...rest\n22}) {\n23  const [currentStep, setCurrentStep] = useState(initialStep);\n24  const [direction, setDirection] = useState(0);\n25  const stepsArray = Children.toArray(children);\n26  const totalSteps = stepsArray.length;\n27  const isCompleted = currentStep > totalSteps;\n28  const isLastStep = currentStep === totalSteps;\n29\n30  const updateStep = (newStep) => {\n31    setCurrentStep(newStep);\n32    if (newStep > totalSteps) {\n33      onFinalStepCompleted();\n34    } else {\n35      onStepChange(newStep);\n36    }\n37  };\n38\n39  const handleBack = () => {\n40    if (currentStep > 1) {\n41      setDirection(-1);\n42      updateStep(currentStep - 1);\n43    }\n44  };\n45\n46  const handleNext = () => {\n47    if (!isLastStep) {\n48      setDirection(1);\n49      updateStep(currentStep + 1);\n50    }\n51  };\n52\n53  const handleComplete = () => {\n54    setDirection(1);\n55    updateStep(totalSteps + 1);\n56  };\n57\n58  return (\n59    <div className=\"outer-container\" {...rest}>\n60      <div className={`step-circle-container ${stepCircleContainerClassName}`} style={{ border: \"1px solid #222\" }}>\n61        <div className={`step-indicator-row ${stepContainerClassName}`}>\n62          {stepsArray.map((_, index) => {\n63            const stepNumber = index + 1;\n64            const isNotLastStep = index < totalSteps - 1;\n65            return (\n66              <React.Fragment key={stepNumber}>\n67                {renderStepIndicator ? (\n68                  renderStepIndicator({\n69                    step: stepNumber,\n70                    currentStep,\n71                    onStepClick: (clicked) => {\n72                      setDirection(clicked > currentStep ? 1 : -1);\n73                      updateStep(clicked);\n74                    },\n75                  })\n76                ) : (\n77                  <StepIndicator\n78                    step={stepNumber}\n79                    disableStepIndicators={disableStepIndicators}\n80                    currentStep={currentStep}\n81                    onClickStep={(clicked) => {\n82                      setDirection(clicked > currentStep ? 1 : -1);\n83                      updateStep(clicked);\n84                    }}\n85                  />\n86                )}\n87                {isNotLastStep && (\n88                  <StepConnector isComplete={currentStep > stepNumber} />\n89                )}\n90              </React.Fragment>\n91            );\n92          })}\n93        </div>\n94\n95        <StepContentWrapper\n96          isCompleted={isCompleted}\n97          currentStep={currentStep}\n98          direction={direction}\n99          className={`step-content-default ${contentClassName}`}\n100        >\n101          {stepsArray[currentStep - 1]}\n102        </StepContentWrapper>\n103\n104        {!isCompleted && (\n105          <div className={`footer-container ${footerClassName}`}>\n106            <div className={`footer-nav ${currentStep !== 1 ? \"spread\" : \"end\"}`}>\n107              {currentStep !== 1 && (\n108                <button\n109                  onClick={handleBack}\n110                  className={`back-button ${currentStep === 1 ? \"inactive\" : \"\"}`}\n111                  {...backButtonProps}\n112                >\n113                  {backButtonText}\n114                </button>\n115              )}\n116              <button\n117                onClick={isLastStep ? handleComplete : handleNext}\n118                className=\"next-button\"\n119                {...nextButtonProps}\n120              >\n121                {isLastStep ? \"Complete\" : nextButtonText}\n122              </button>\n123            </div>\n124          </div>\n125        )}\n126      </div>\n127    </div>\n128  );\n129}\n130\n131function StepContentWrapper({ isCompleted, currentStep, direction, children, className }) {\n132  const [parentHeight, setParentHeight] = useState(0);\n133\n134  return (\n135    <motion.div\n136      className={className}\n137      style={{ position: \"relative\", overflow: \"hidden\" }}\n138      animate={{ height: isCompleted ? 0 : parentHeight }}\n139      transition={{ type: \"spring\", duration: 0.4 }}\n140    >\n141      <AnimatePresence initial={false} mode=\"sync\" custom={direction}>\n142        {!isCompleted && (\n143          <SlideTransition key={currentStep} direction={direction} onHeightReady={(h) => setParentHeight(h)}>\n144            {children}\n145          </SlideTransition>\n146        )}\n147      </AnimatePresence>\n148    </motion.div>\n149  );\n150}\n151\n152function SlideTransition({ children, direction, onHeightReady }) {\n153  const containerRef = useRef(null);\n154\n155  useLayoutEffect(() => {\n156    if (containerRef.current) onHeightReady(containerRef.current.offsetHeight);\n157  }, [children, onHeightReady]);\n158\n159  return (\n160    <motion.div\n161      ref={containerRef}\n162      custom={direction}\n163      variants={stepVariants}\n164      initial=\"enter\"\n165      animate=\"center\"\n166      exit=\"exit\"\n167      transition={{ duration: 0.4 }}\n168      style={{ position: \"absolute\", left: 0, right: 0, top: 0 }}\n169    >\n170      {children}\n171    </motion.div>\n172  );\n173}\n174\n175const stepVariants = {\n176  enter: (dir) => ({\n177    x: dir >= 0 ? \"-100%\" : \"100%\",\n178    opacity: 0,\n179  }),\n180  center: {\n181    x: \"0%\",\n182    opacity: 1,\n183  },\n184  exit: (dir) => ({\n185    x: dir >= 0 ? \"50%\" : \"-50%\",\n186    opacity: 0,\n187  }),\n188};\n189\n190export function Step({ children }) {\n191  return <div className=\"step-default\">{children}</div>;\n192}\n193\n194function StepIndicator({ step, currentStep, onClickStep, disableStepIndicators }) {\n195  const status = currentStep === step ? \"active\" : currentStep < step ? \"inactive\" : \"complete\";\n196\n197  const handleClick = () => {\n198    if (step !== currentStep && !disableStepIndicators) onClickStep(step);\n199  };\n200\n201  return (\n202    <motion.div onClick={handleClick} className=\"step-indicator\" animate={status} initial={false}>\n203      <motion.div\n204        variants={{\n205          inactive: { scale: 1, backgroundColor: \"#222\", color: \"#a3a3a3\" },\n206          active: { scale: 1, backgroundColor: \"#00d8ff\", color: \"#00d8ff\" },\n207          complete: { scale: 1, backgroundColor: \"#00d8ff\", color: \"#3b82f6\" },\n208        }}\n209        transition={{ duration: 0.3 }}\n210        className=\"step-indicator-inner\"\n211      >\n212        {status === \"complete\" ? (\n213          <CheckIcon className=\"check-icon\" />\n214        ) : status === \"active\" ? (\n215          <div className=\"active-dot\" />\n216        ) : (\n217          <span className=\"step-number\">{step}</span>\n218        )}\n219      </motion.div>\n220    </motion.div>\n221  );\n222}\n223\n224function StepConnector({ isComplete }) {\n225  const lineVariants = {\n226    incomplete: { width: 0, backgroundColor: \"transparent\" },\n227    complete: { width: \"100%\", backgroundColor: \"#00d8ff\" },\n228  };\n229\n230  return (\n231    <div className=\"step-connector\">\n232      <motion.div\n233        className=\"step-connector-inner\"\n234        variants={lineVariants}\n235        initial={false}\n236        animate={isComplete ? \"complete\" : \"incomplete\"}\n237        transition={{ duration: 0.4 }}\n238      />\n239    </div>\n240  );\n241}\n242\n243function CheckIcon(props) {\n244  return (\n245    <svg {...props} fill=\"none\" stroke=\"currentColor\" strokeWidth={2} viewBox=\"0 0 24 24\">\n246      <motion.path\n247        initial={{ pathLength: 0 }}\n248        animate={{ pathLength: 1 }}\n249        transition={{ delay: 0.1, type: \"tween\", ease: \"easeOut\", duration: 0.3 }}\n250        strokeLinecap=\"round\"\n251        strokeLinejoin=\"round\"\n252        d=\"M5 13l4 4L19 7\"\n253      />\n254    </svg>\n255  );\n256}\n257\n\n1.outer-container {\n2  display: flex;\n3  min-height: 100%;\n4  flex: 1 1 0%;\n5  flex-direction: column;\n6  align-items: center;\n7  justify-content: center;\n8  padding: 1rem;\n9}\n10\n11@media (min-width: 640px) {\n12  .outer-container {\n13    aspect-ratio: 4 / 3;\n14  }\n15}\n16\n17@media (min-width: 768px) {\n18  .outer-container {\n19    aspect-ratio: 2 / 1;\n20  }\n21}\n22\n23.step-circle-container {\n24  margin-left: auto;\n25  margin-right: auto;\n26  width: 100%;\n27  max-width: 28rem;\n28  border-radius: 2rem;\n29  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1),\n30    0 10px 10px -5px rgba(0, 0, 0, 0.04);\n31}\n32\n33.step-indicator-row {\n34  display: flex;\n35  width: 100%;\n36  align-items: center;\n37  padding: 2rem;\n38}\n39\n40.step-content-default {\n41  position: relative;\n42  overflow: hidden;\n43}\n44\n45.step-default {\n46  padding-left: 2rem;\n47  padding-right: 2rem;\n48}\n49\n50.footer-container {\n51  padding-left: 2rem;\n52  padding-right: 2rem;\n53  padding-bottom: 2rem;\n54}\n55\n56.footer-nav {\n57  margin-top: 2.5rem;\n58  display: flex;\n59}\n60\n61.footer-nav.spread {\n62  justify-content: space-between;\n63}\n64\n65.footer-nav.end {\n66  justify-content: flex-end;\n67}\n68\n69.back-button {\n70  transition: all 350ms;\n71  border-radius: 0.25rem;\n72  padding: 0.25rem 0.5rem;\n73  color: #a3a3a3;\n74  cursor: pointer;\n75}\n76\n77.back-button:hover {\n78  color: #52525b;\n79}\n80\n81.back-button.inactive {\n82  pointer-events: none;\n83  opacity: 0.5;\n84  color: #a3a3a3;\n85}\n86\n87.next-button {\n88  transition: all 350ms;\n89  display: flex;\n90  align-items: center;\n91  justify-content: center;\n92  border-radius: 9999px;\n93  background-color: #00d8ff;\n94  color: #060606;\n95  font-weight: 500;\n96  letter-spacing: -0.025em;\n97  padding: 0.375rem 0.875rem;\n98  cursor: pointer;\n99}\n100\n101.next-button:hover {\n102  background-color: #00d8ff;\n103}\n104\n105.next-button:active {\n106  background-color: #00d8ff;\n107}\n108\n109.step-indicator {\n110  position: relative;\n111  cursor: pointer;\n112  outline: none;\n113}\n114\n115.step-indicator-inner {\n116  display: flex;\n117  height: 2rem;\n118  width: 2rem;\n119  align-items: center;\n120  justify-content: center;\n121  border-radius: 9999px;\n122  font-weight: 600;\n123}\n124\n125.active-dot {\n126  height: 0.75rem;\n127  width: 0.75rem;\n128  border-radius: 9999px;\n129  background-color: #060606;\n130}\n131\n132.step-number {\n133  font-size: 0.875rem;\n134}\n135\n136.step-connector {\n137  position: relative;\n138  margin-left: 0.5rem;\n139  margin-right: 0.5rem;\n140  height: 0.125rem;\n141  flex: 1;\n142  overflow: hidden;\n143  border-radius: 0.25rem;\n144  background-color: #52525b;\n145}\n146\n147.step-connector-inner {\n148  position: absolute;\n149  left: 0;\n150  top: 0;\n151  height: 100%;\n152}\n153\n154.check-icon {\n155  height: 1rem;\n156  width: 1rem;\n157  color: #000;\n158}\n\n1import React, { useState, Children, useRef, useLayoutEffect } from \"react\";\n2import { motion, AnimatePresence } from \"framer-motion\";\n3\n4export default function Stepper({\n5  children,\n6  initialStep = 1,\n7  onStepChange = () => { },\n8  onFinalStepCompleted = () => { },\n9  stepCircleContainerClassName = \"\",\n10  stepContainerClassName = \"\",\n11  contentClassName = \"\",\n12  footerClassName = \"\",\n13  backButtonProps = {},\n14  nextButtonProps = {},\n15  backButtonText = \"Back\",\n16  nextButtonText = \"Continue\",\n17  disableStepIndicators = false,\n18  renderStepIndicator,\n19  ...rest\n20}) {\n21  const [currentStep, setCurrentStep] = useState(initialStep);\n22  const [direction, setDirection] = useState(0);\n23  const stepsArray = Children.toArray(children);\n24  const totalSteps = stepsArray.length;\n25  const isCompleted = currentStep > totalSteps;\n26  const isLastStep = currentStep === totalSteps;\n27\n28  const updateStep = (newStep) => {\n29    setCurrentStep(newStep);\n30    if (newStep > totalSteps) onFinalStepCompleted();\n31    else onStepChange(newStep);\n32  };\n33\n34  const handleBack = () => {\n35    if (currentStep > 1) {\n36      setDirection(-1);\n37      updateStep(currentStep - 1);\n38    }\n39  };\n40\n41  const handleNext = () => {\n42    if (!isLastStep) {\n43      setDirection(1);\n44      updateStep(currentStep + 1);\n45    }\n46  };\n47\n48  const handleComplete = () => {\n49    setDirection(1);\n50    updateStep(totalSteps + 1);\n51  };\n52\n53  return (\n54    <div\n55      className=\"flex min-h-full flex-1 flex-col items-center justify-center p-4 sm:aspect-[4/3] md:aspect-[2/1]\"\n56      {...rest}\n57    >\n58      <div\n59        className={`mx-auto w-full max-w-md rounded-4xl shadow-xl ${stepCircleContainerClassName}`}\n60        style={{ border: \"1px solid #222\" }}\n61      >\n62        <div className={`${stepContainerClassName} flex w-full items-center p-8`}>\n63          {stepsArray.map((_, index) => {\n64            const stepNumber = index + 1;\n65            const isNotLastStep = index < totalSteps - 1;\n66            return (\n67              <React.Fragment key={stepNumber}>\n68                {renderStepIndicator ? (\n69                  renderStepIndicator({\n70                    step: stepNumber,\n71                    currentStep,\n72                    onStepClick: (clicked) => {\n73                      setDirection(clicked > currentStep ? 1 : -1);\n74                      updateStep(clicked);\n75                    },\n76                  })\n77                ) : (\n78                  <StepIndicator\n79                    step={stepNumber}\n80                    disableStepIndicators={disableStepIndicators}\n81                    currentStep={currentStep}\n82                    onClickStep={(clicked) => {\n83                      setDirection(clicked > currentStep ? 1 : -1);\n84                      updateStep(clicked);\n85                    }}\n86                  />\n87                )}\n88                {isNotLastStep && (\n89                  <StepConnector isComplete={currentStep > stepNumber} />\n90                )}\n91              </React.Fragment>\n92            );\n93          })}\n94        </div>\n95        <StepContentWrapper\n96          isCompleted={isCompleted}\n97          currentStep={currentStep}\n98          direction={direction}\n99          className={`space-y-2 px-8 ${contentClassName}`}\n100        >\n101          {stepsArray[currentStep - 1]}\n102        </StepContentWrapper>\n103        {!isCompleted && (\n104          <div className={`px-8 pb-8 ${footerClassName}`}>\n105            <div\n106              className={`mt-10 flex ${currentStep !== 1 ? \"justify-between\" : \"justify-end\"\n107                }`}\n108            >\n109              {currentStep !== 1 && (\n110                <button\n111                  onClick={handleBack}\n112                  className={`duration-350 rounded px-2 py-1 transition ${currentStep === 1\n113                    ? \"pointer-events-none opacity-50 text-neutral-400\"\n114                    : \"text-neutral-400 hover:text-neutral-700\"\n115                    }`}\n116                  {...backButtonProps}\n117                >\n118                  {backButtonText}\n119                </button>\n120              )}\n121              <button\n122                onClick={isLastStep ? handleComplete : handleNext}\n123                className=\"duration-350 flex items-center justify-center rounded-full bg-green-500 py-1.5 px-3.5 font-medium tracking-tight text-white transition hover:bg-green-600 active:bg-green-700\"\n124                {...nextButtonProps}\n125              >\n126                {isLastStep ? \"Complete\" : nextButtonText}\n127              </button>\n128            </div>\n129          </div>\n130        )}\n131      </div>\n132    </div>\n133  );\n134}\n135\n136function StepContentWrapper({ isCompleted, currentStep, direction, children, className }) {\n137  const [parentHeight, setParentHeight] = useState(0);\n138\n139  return (\n140    <motion.div\n141      style={{ position: \"relative\", overflow: \"hidden\" }}\n142      animate={{ height: isCompleted ? 0 : parentHeight }}\n143      transition={{ type: \"spring\", duration: 0.4 }}\n144      className={className}\n145    >\n146      <AnimatePresence initial={false} mode=\"sync\" custom={direction}>\n147        {!isCompleted && (\n148          <SlideTransition\n149            key={currentStep}\n150            direction={direction}\n151            onHeightReady={(h) => setParentHeight(h)}\n152          >\n153            {children}\n154          </SlideTransition>\n155        )}\n156      </AnimatePresence>\n157    </motion.div>\n158  );\n159}\n160\n161function SlideTransition({ children, direction, onHeightReady }) {\n162  const containerRef = useRef(null);\n163\n164  useLayoutEffect(() => {\n165    if (containerRef.current) onHeightReady(containerRef.current.offsetHeight);\n166  }, [children, onHeightReady]);\n167\n168  return (\n169    <motion.div\n170      ref={containerRef}\n171      custom={direction}\n172      variants={stepVariants}\n173      initial=\"enter\"\n174      animate=\"center\"\n175      exit=\"exit\"\n176      transition={{ duration: 0.4 }}\n177      style={{ position: \"absolute\", left: 0, right: 0, top: 0 }}\n178    >\n179      {children}\n180    </motion.div>\n181  );\n182}\n183\n184const stepVariants = {\n185  enter: (dir) => ({\n186    x: dir >= 0 ? \"-100%\" : \"100%\",\n187    opacity: 0,\n188  }),\n189  center: {\n190    x: \"0%\",\n191    opacity: 1,\n192  },\n193  exit: (dir) => ({\n194    x: dir >= 0 ? \"50%\" : \"-50%\",\n195    opacity: 0,\n196  }),\n197};\n198\n199export function Step({ children }) {\n200  return <div className=\"px-8\">{children}</div>;\n201}\n202\n203function StepIndicator({ step, currentStep, onClickStep, disableStepIndicators }) {\n204  const status = currentStep === step ? \"active\" : currentStep < step ? \"inactive\" : \"complete\";\n205\n206  const handleClick = () => {\n207    if (step !== currentStep && !disableStepIndicators) onClickStep(step);\n208  };\n209\n210  return (\n211    <motion.div\n212      onClick={handleClick}\n213      className=\"relative cursor-pointer outline-none focus:outline-none\"\n214      animate={status}\n215      initial={false}\n216    >\n217      <motion.div\n218        variants={{\n219          inactive: { scale: 1, backgroundColor: \"#222\", color: \"#a3a3a3\" },\n220          active: { scale: 1, backgroundColor: \"#00d8ff\", color: \"#00d8ff\" },\n221          complete: { scale: 1, backgroundColor: \"#00d8ff\", color: \"#3b82f6\" },\n222        }}\n223        transition={{ duration: 0.3 }}\n224        className=\"flex h-8 w-8 items-center justify-center rounded-full font-semibold\"\n225      >\n226        {status === \"complete\" ? (\n227          <CheckIcon className=\"h-4 w-4 text-black\" />\n228        ) : status === \"active\" ? (\n229          <div className=\"h-3 w-3 rounded-full bg-[#060606]\" />\n230        ) : (\n231          <span className=\"text-sm\">{step}</span>\n232        )}\n233      </motion.div>\n234    </motion.div>\n235  );\n236}\n237\n238function StepConnector({ isComplete }) {\n239  const lineVariants = {\n240    incomplete: { width: 0, backgroundColor: \"transparent\" },\n241    complete: { width: \"100%\", backgroundColor: \"#00d8ff\" },\n242  };\n243\n244  return (\n245    <div className=\"relative mx-2 h-0.5 flex-1 overflow-hidden rounded bg-neutral-600\">\n246      <motion.div\n247        className=\"absolute left-0 top-0 h-full\"\n248        variants={lineVariants}\n249        initial={false}\n250        animate={isComplete ? \"complete\" : \"incomplete\"}\n251        transition={{ duration: 0.4 }}\n252      />\n253    </div>\n254  );\n255}\n256\n257function CheckIcon(props) {\n258  return (\n259    <svg\n260      {...props}\n261      fill=\"none\"\n262      stroke=\"currentColor\"\n263      strokeWidth={2}\n264      viewBox=\"0 0 24 24\"\n265    >\n266      <motion.path\n267        initial={{ pathLength: 0 }}\n268        animate={{ pathLength: 1 }}\n269        transition={{ delay: 0.1, type: \"tween\", ease: \"easeOut\", duration: 0.3 }}\n270        strokeLinecap=\"round\"\n271        strokeLinejoin=\"round\"\n272        d=\"M5 13l4 4L19 7\"\n273      />\n274    </svg>\n275  );\n276}\n277"
}