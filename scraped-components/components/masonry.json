{
  "name": "Masonry",
  "description": "An open source collection of high quality, animated, interactive & fully customizable React components for building stunning, memorable user interfaces.",
  "props": {},
  "dependencies": [],
  "url": "https://www.reactbits.dev/components/masonry",
  "code": "1npm i @react-spring/web\n\n1import Masonry from './Masonry'\n2  \n3const data = [\n4  { id: 1, image: 'https://picsum.photos/id/10/200/300', height: 400 },\n5  { id: 2, image: 'https://picsum.photos/id/14/200/300', height: 300 },\n6  { id: 3, image: 'https://picsum.photos/id/15/200/300', height: 300 },\n7  { id: 4, image: 'https://picsum.photos/id/16/200/300', height: 300 },\n8  { id: 5, image: 'https://picsum.photos/id/17/200/300', height: 300 },\n9  { id: 6, image: 'https://picsum.photos/id/19/200/300', height: 300 },\n10  { id: 7, image: 'https://picsum.photos/id/37/200/300', height: 200 },\n11  { id: 8, image: 'https://picsum.photos/id/39/200/300', height: 300 },\n12  { id: 9, image: 'https://picsum.photos/id/85/200/300', height: 200 },\n13  { id: 10, image: 'https://picsum.photos/id/103/200/300', height: 400 }\n14];\n15\n16<Masonry data={data} />\n\n1import { useState, useEffect, useMemo, useRef } from 'react';\n2import { useTransition, a } from '@react-spring/web';\n3\n4import './Masonry.css';\n5\n6function Masonry({ data }) {\n7  const [columns, setColumns] = useState(2);\n8\n9  useEffect(() => {\n10    const updateColumns = () => {\n11      if (window.matchMedia('(min-width: 1500px)').matches) {\n12        setColumns(5);\n13      } else if (window.matchMedia('(min-width: 1000px)').matches) {\n14        setColumns(4);\n15      } else if (window.matchMedia('(min-width: 600px)').matches) {\n16        setColumns(3);\n17      } else {\n18        setColumns(1); // Breakpoint for mobile devices\n19      }\n20    };\n21\n22    updateColumns();\n23    window.addEventListener('resize', updateColumns);\n24    return () => window.removeEventListener('resize', updateColumns);\n25  }, []);\n26\n27  const ref = useRef();\n28  const [width, setWidth] = useState(0);\n29\n30  useEffect(() => {\n31    const handleResize = () => {\n32      if (ref.current) {\n33        setWidth(ref.current.offsetWidth);\n34      }\n35    };\n36\n37    handleResize(); // Set initial width\n38    window.addEventListener('resize', handleResize);\n39    return () => window.removeEventListener('resize', handleResize);\n40  }, [ref]);\n41\n42  const [heights, gridItems] = useMemo(() => {\n43    let heights = new Array(columns).fill(0);\n44    let gridItems = data.map((child) => {\n45      const column = heights.indexOf(Math.min(...heights));\n46      const x = (width / columns) * column;\n47      const y = (heights[column] += child.height / 2) - child.height / 2;\n48      return { ...child, x, y, width: width / columns, height: child.height / 2 };\n49    });\n50    return [heights, gridItems];\n51  }, [columns, data, width]);\n52\n53  const transitions = useTransition(gridItems, {\n54    keys: (item) => item.id, // Use a unique key based on the id\n55    from: ({ x, y, width, height }) => ({ x, y, width, height, opacity: 0 }),\n56    enter: ({ x, y, width, height }) => ({ x, y, width, height, opacity: 1 }),\n57    update: ({ x, y, width, height }) => ({ x, y, width, height }),\n58    leave: { height: 0, opacity: 0 },\n59    config: { mass: 5, tension: 500, friction: 100 },\n60    trail: 25,\n61  });\n62\n63  // Render the grid\n64  return (\n65    <div ref={ref} className='masonry' style={{ height: Math.max(...heights) }}>\n66      {transitions((style, item) => (\n67        <a.div key={item.id} style={style}>\n68          <div\n69            style={{\n70              backgroundColor: '#ffffff', // Set background if needed\n71              width: '100%',\n72              height: '100%',\n73              backgroundImage: `url(${item.image})`,\n74              backgroundSize: 'cover',\n75              backgroundPosition: 'center',\n76            }}\n77          />\n78        </a.div>\n79      ))}\n80    </div>\n81  );\n82}\n83\n84export default Masonry;\n85\n\n1.masonry {\n2  position: relative;\n3  width: 100%;\n4  height: 100%;\n5}\n6\n7.masonry>div {\n8  position: absolute;\n9  will-change: transform, width, height, opacity;\n10  padding: 10px;\n11}\n12\n13.masonry>div>div {\n14  position: relative;\n15  background-size: cover;\n16  background-position: center center;\n17  width: 100%;\n18  height: 100%;\n19  overflow: hidden;\n20  text-transform: uppercase;\n21  font-size: 10px;\n22  line-height: 10px;\n23  border-radius: 10px;\n24  box-shadow: 0px 10px 50px -10px rgba(0, 0, 0, 0.2);\n25  transition: 0.3s ease;\n26}\n27\n28.masonry>div>div:hover {\n29  transform: scale(1.1);\n30  transition: 0.3s ease;\n31}\n\n1import { useState, useEffect, useMemo, useRef } from 'react';\n2import { useTransition, a } from '@react-spring/web';\n3\n4function Masonry({ data }) {\n5  const [columns, setColumns] = useState(2);\n6\n7  useEffect(() => {\n8    const updateColumns = () => {\n9      if (window.matchMedia('(min-width: 1500px)').matches) {\n10        setColumns(5);\n11      } else if (window.matchMedia('(min-width: 1000px)').matches) {\n12        setColumns(4);\n13      } else if (window.matchMedia('(min-width: 600px)').matches) {\n14        setColumns(3);\n15      } else {\n16        setColumns(1); // Mobile devices\n17      }\n18    };\n19\n20    updateColumns();\n21    window.addEventListener('resize', updateColumns);\n22    return () => window.removeEventListener('resize', updateColumns);\n23  }, []);\n24\n25  const ref = useRef();\n26  const [width, setWidth] = useState(0);\n27\n28  useEffect(() => {\n29    const handleResize = () => {\n30      if (ref.current) {\n31        setWidth(ref.current.offsetWidth);\n32      }\n33    };\n34\n35    handleResize();\n36    window.addEventListener('resize', handleResize);\n37    return () => window.removeEventListener('resize', handleResize);\n38  }, []);\n39\n40  const [heights, gridItems] = useMemo(() => {\n41    let heights = new Array(columns).fill(0);\n42    let gridItems = data.map((child) => {\n43      const column = heights.indexOf(Math.min(...heights));\n44      const x = (width / columns) * column;\n45      const y = (heights[column] += child.height / 2) - child.height / 2;\n46      return { ...child, x, y, width: width / columns, height: child.height / 2 };\n47    });\n48    return [heights, gridItems];\n49  }, [columns, data, width]);\n50\n51  const transitions = useTransition(gridItems, {\n52    keys: (item) => item.id,\n53    from: ({ x, y, width, height }) => ({ x, y, width, height, opacity: 0 }),\n54    enter: ({ x, y, width, height }) => ({ x, y, width, height, opacity: 1 }),\n55    update: ({ x, y, width, height }) => ({ x, y, width, height }),\n56    leave: { height: 0, opacity: 0 },\n57    config: { mass: 5, tension: 500, friction: 100 },\n58    trail: 25,\n59  });\n60\n61  return (\n62    <div\n63      ref={ref}\n64      className=\"relative w-full h-full\"\n65      style={{ height: Math.max(...heights) }}\n66    >\n67      {transitions((style, item) => (\n68        <a.div\n69          key={item.id}\n70          style={style}\n71          className=\"absolute p-[15px] [will-change:transform,width,height,opacity]\"\n72        >\n73          <div\n74            className=\"relative w-full h-full overflow-hidden uppercase text-[10px] leading-[10px] rounded-[4px] shadow-[0px_10px_50px_-10px_rgba(0,0,0,0.2)] transition duration-300 ease hover:scale-110\"\n75            style={{\n76              backgroundColor: '#ffffff',\n77              backgroundImage: `url(${item.image})`,\n78              backgroundSize: 'cover',\n79              backgroundPosition: 'center',\n80            }}\n81          />\n82        </a.div>\n83      ))}\n84    </div>\n85  );\n86}\n87\n88export default Masonry;\n89",
  "category": "components",
  "scrapedAt": "2025-04-27T11:47:17.788Z",
  "previewImage": "masonry-preview.png"
}